{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\nimport React, { useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport GoogleMapReact from 'google-map-react';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\"; // const LocationPin = ({ text }) => (\n//     <div className=\"pin\">\n//         <Icon icon={locationIcon} className=\"pin-icon\"/>\n//         <p className=\"pin-text\">{text}</p>\n//     </div>\n// )\n//\n// const Map = ({ location, zoomLevel }) => (\n//     <div className=\"map\">\n//     </div>\n// )\n\nconst getLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(getCoordinates);\n    alert(\"Geolocation: \" + this.state.latitude + this.state.longitude);\n  } else {\n    alert(\"Geolocation not supported by this browser\");\n  }\n};\n\nconst getCoordinates = position => {\n  this.setState({\n    latitude: position.coords.latitude,\n    longitude: position.coords.longitude\n  });\n}; // Impromptu JSON data for locations\n\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Hello\"))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useState","Link","GoogleMapReact","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","getLocation","navigator","geolocation","getCurrentPosition","getCoordinates","alert","state","latitude","longitude","position","setState","coords","Interaction","locations","UnwrappedMap","selectedInteraction","setSelectedInteraction","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACIC,SADJ,EAEIC,YAFJ,EAGIC,aAHJ,EAIIC,MAJJ,EAKIC,UALJ,QAMO,mBANP;;;+CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,MAAGC,SAAS,CAACC,WAAb,EAA0B;AACtBD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,cAAzC;AACAC,IAAAA,KAAK,CAAC,kBAAkB,KAAKC,KAAL,CAAWC,QAA7B,GAAwC,KAAKD,KAAL,CAAWE,SAApD,CAAL;AACH,GAHD,MAGO;AACHH,IAAAA,KAAK,CAAC,2CAAD,CAAL;AACH;AACJ,CAPD;;AAUA,MAAMD,cAAc,GAAIK,QAAD,IAAc;AACjC,OAAKC,QAAL,CAAc;AACVH,IAAAA,QAAQ,EAAEE,QAAQ,CAACE,MAAT,CAAgBJ,QADhB;AAEVC,IAAAA,SAAS,EAAEC,QAAQ,CAACE,MAAT,CAAgBH;AAFjB,GAAd;AAIH,CALD,C,CAOA;;;AACA,MAAMI,WAAW,GAAG;AAChBC,EAAAA,SAAS,EAAE,CACP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GADO,EAOP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GAPO,EAaP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GAbO;AADK,CAApB;;AAuBA,SAASC,YAAT,GAAwB;AAEpB,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDxB,QAAQ,CAAC,IAAD,CAA9D;AAEA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ;AAFJ;AAsGH;;AAED,MAAMyB,UAAU,GAAGrB,YAAY,CAACC,aAAa,CAACiB,YAAD,CAAd,CAA/B;AAEA,eAAe,SAASI,GAAT,GAAe;AAC1B,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,MAAxB;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AACI,IAAA,YAAY,EAAG,yFAAwFC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,EAD5I;AAEI,IAAA,cAAc,eAAG;AAAK,MAAA,KAAK,EAAE;AAACJ,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGI,IAAA,gBAAgB,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHvB;AAII,IAAA,UAAU,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAUH","sourcesContent":["import React, { useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport GoogleMapReact from 'google-map-react';\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\n\n// const LocationPin = ({ text }) => (\n//     <div className=\"pin\">\n//         <Icon icon={locationIcon} className=\"pin-icon\"/>\n//         <p className=\"pin-text\">{text}</p>\n//     </div>\n// )\n//\n// const Map = ({ location, zoomLevel }) => (\n//     <div className=\"map\">\n//     </div>\n// )\n\nconst getLocation = () => {\n    if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(getCoordinates);\n        alert(\"Geolocation: \" + this.state.latitude + this.state.longitude );\n    } else {\n        alert(\"Geolocation not supported by this browser\")\n    }\n}\n\n\nconst getCoordinates = (position) => {\n    this.setState({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n    })\n}\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    return (\n        // Creates map\n        <div>\n            <h1>Hello</h1>\n        {/*<GoogleMap*/}\n        {/*    defaultZoom={20}*/}\n        {/*    defaultCenter={{lat: 51.523214, lng: -2.578499}}*/}\n        {/*>*/}\n        {/*    /!* Maps JSON date to Function *!/*/}\n        {/*    {Interaction.locations.map((interactions) => (*/}\n        {/*        <Marker*/}\n        {/*            key={interactions.id}*/}\n        {/*            position={{*/}\n        {/*                lat: interactions.coordinates[0],*/}\n        {/*                lng: interactions.coordinates[1]*/}\n        {/*            }}*/}\n        {/*            onClick={() => {*/}\n        {/*                setSelectedInteraction(interactions);*/}\n        {/*            }}*/}\n        {/*            icon={*/}\n        {/*                interactions.type === \"Quiz\" && (*/}\n        {/*                    QuizIcon*/}\n        {/*                ) ||*/}\n        {/*                interactions.type === \"Fact\" && (*/}\n        {/*                    FactIcon*/}\n        {/*                ) ||*/}\n        {/*                    interactions.type === \"Game\" && (*/}\n        {/*                        GameIcon*/}\n        {/*                )*/}\n        {/*            }*/}\n        {/*        />*/}\n        {/*    ))}*/}\n        \n        {/*    {*/}\n        {/*        // Function for if the button pressed is a QUIZ button*/}\n        {/*        selectedInteraction === Interaction.locations[0] && (*/}\n        {/*            <div className=\"map-info-window\">*/}\n        {/*                <InfoWindow*/}\n        {/*                    position={{*/}\n        {/*                        lat: selectedInteraction.coordinates[0] + 0.000065,*/}\n        {/*                        lng: selectedInteraction.coordinates[1]*/}\n        {/*                    }}*/}\n        {/*                    onCloseClick={() => {*/}\n        {/*                        setSelectedInteraction(null);*/}\n        {/*                    }}*/}\n        {/*                >*/}\n        {/*                    <div className=\"map-button\">*/}\n        {/*                        <h2>{ selectedInteraction.type }</h2>*/}\n        {/*                        <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">*/}\n        {/*                            <h3>{selectedInteraction.description}</h3>*/}\n        {/*                        </Link>*/}\n        {/*                    </div>*/}\n        {/*                </InfoWindow>*/}\n        {/*            </div>*/}\n        {/*        ) ||*/}\n        \n        {/*        // Function for if the button pressed is a FACT button*/}\n        {/*        selectedInteraction === Interaction.locations[1] && (*/}\n        {/*            <InfoWindow*/}\n        {/*                position={{*/}\n        {/*                    lat: selectedInteraction.coordinates[0] + 0.000065,*/}\n        {/*                    lng: selectedInteraction.coordinates[1]*/}\n        {/*                }}*/}\n        {/*                onCloseClick={() => {*/}\n        {/*                    setSelectedInteraction(null);*/}\n        {/*                }}*/}\n        {/*                className=\"map-info-window\"*/}\n        {/*            >*/}\n        {/*                <div className=\"map-button\">*/}\n        {/*                    <h2>{ selectedInteraction.type }</h2>*/}\n        {/*                    <Link to=\"/fact\" className=\"basic-btn fact-btn\">*/}\n        {/*                        <h3>{ selectedInteraction.description }</h3>*/}\n        {/*                    </Link>*/}\n        {/*                </div>*/}\n        {/*            </InfoWindow>*/}\n        {/*        ) ||*/}\n        \n        {/*        // Function for if the button pressed is a GAME button*/}\n        {/*        selectedInteraction === Interaction.locations[2] && (*/}\n        {/*            <InfoWindow*/}\n        {/*                position={{*/}\n        {/*                    lat: selectedInteraction.coordinates[0] + 0.000065,*/}\n        {/*                    lng: selectedInteraction.coordinates[1]*/}\n        {/*                }}*/}\n        {/*                onCloseClick={() => {*/}\n        {/*                    setSelectedInteraction(null);*/}\n        {/*                }}*/}\n        {/*                className=\"map-info-window\"*/}\n        {/*            >*/}\n        {/*                <div className=\"map-button\">*/}\n        {/*                    <h2>{ selectedInteraction.type }</h2>*/}\n        {/*                    <Link to=\"/game\" className=\"basic-btn game-btn\">*/}\n        {/*                        <h3>{ selectedInteraction.description }</h3>*/}\n        {/*                    </Link>*/}\n        {/*                </div>*/}\n        {/*            </InfoWindow>*/}\n        {/*        )*/}\n        \n        {/*    }*/}\n        {/*</GoogleMap>*/}\n        </div>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}