{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\nimport React, { Component, useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport MapComponent from './mapComponent';\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getGeoLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.handleMarkerClick = () => {\n      this.setState({\n        isMarkerShown: false\n      });\n      this.delayedShowMarker();\n    };\n\n    this.getGeoLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLatLng: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLatLng: {\n        lat: 0,\n        lng: 0\n      },\n      isMarkerShown: false,\n      selectedInteraction: null,\n      setSelectedInteraction: null\n    };\n  }\n\n  componentWillUpdate() {\n    this.getGeoLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(MapComponent, {\n      isMarkerShown: this.state.isMarkerShown,\n      onMarkerClick: this.handleMarkerClick,\n      currentLocation: this.state.currentLatLng,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, MapInteractions.locations.map(clickableInteractions => /*#__PURE__*/React.createElement(Marker, {\n      key: clickableInteractions.id,\n      position: {\n        lat: clickableInteractions.coordinates[0],\n        lng: clickableInteractions.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(clickableInteractions);\n      },\n      icon: clickableInteractions.type === \"Quiz\" && QuizIcon || clickableInteractions.type === \"Fact\" && FactIcon || clickableInteractions.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst MapInteractions = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\nexport default MapTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","useState","withScriptjs","withGoogleMap","GoogleMap","Marker","MapComponent","MapTest","constructor","props","delayedShowMarker","setTimeout","getGeoLocation","setState","isMarkerShown","handleMarkerClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","prevState","currentLatLng","lat","latitude","lng","longitude","state","selectedInteraction","setSelectedInteraction","componentWillUpdate","componentDidMount","render","MapInteractions","locations","map","clickableInteractions","id","coordinates","type","QuizIcon","FactIcon","GameIcon"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps'\nimport MapComponent from './mapComponent'\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\n\nclass MapTest extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentLatLng: {\n                lat: 0,\n                lng: 0\n            },\n            isMarkerShown: false,\n            selectedInteraction: null,\n            setSelectedInteraction: null\n        }\n    }\n\n    componentWillUpdate(){\n        this.getGeoLocation()\n    }\n\n    componentDidMount() {\n        this.delayedShowMarker()\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getGeoLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    handleMarkerClick = () => {\n        this.setState({ isMarkerShown: false })\n        this.delayedShowMarker()\n    }\n\n    getGeoLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLatLng: {\n                            ...prevState.currentLatLng,\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n\n    render() {\n        return (\n            <MapComponent\n                isMarkerShown={this.state.isMarkerShown}\n                onMarkerClick={this.handleMarkerClick}\n                currentLocation={this.state.currentLatLng}\n            >\n                {MapInteractions.locations.map(clickableInteractions => (\n                    <Marker\n                        key={clickableInteractions.id}\n                        position={{\n                            lat: clickableInteractions.coordinates[0],\n                            lng: clickableInteractions.coordinates[1]\n                        }}\n                        onClick={() => {\n                            setSelectedInteraction(clickableInteractions);\n                        }}\n                        icon={\n                            clickableInteractions.type === \"Quiz\" && (QuizIcon)\n                            ||\n                            clickableInteractions.type === \"Fact\" && (FactIcon)\n                            ||\n                            clickableInteractions.type === \"Game\" && (GameIcon)\n                        }\n                    />\n                ))}\n            </MapComponent>\n        )\n    }\n}\n\nconst MapInteractions = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nexport default MapTest;\n"]},"metadata":{},"sourceType":"module"}