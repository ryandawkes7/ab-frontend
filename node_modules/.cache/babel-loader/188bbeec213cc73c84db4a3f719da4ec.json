{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\n// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"FactFormat\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"FactFormat\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\n/* global google */\nimport React, { useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport { usePosition } from 'use-position';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow, GroundOverlay } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIncomplete from \"./assets/quiz-icon.svg\";\nimport QuizComplete from \"./assets/quiz-complete.svg\";\nimport FactIncomplete from \"./assets/fact-icon.svg\";\nimport MapOverlay from \"./assets/main-building.svg\"; // Impromptu JSON data for locations\n\nexport const Interaction = {\n  locations: {\n    Quiz: [{\n      id: 1,\n      coordinates: [51.523176, -2.578209],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 2,\n      coordinates: [51.523315, -2.578260],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 3,\n      coordinates: [51.523365, -2.578005],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 4,\n      coordinates: [51.523565, -2.578309],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 5,\n      coordinates: [51.523395, -2.578309],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 6,\n      coordinates: [51.523265, -2.578649],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 7,\n      coordinates: [51.523176, -2.578409],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 8,\n      coordinates: [51.523076, -2.578259],\n      description: \"Test Me!\",\n      complete: false\n    }, {\n      id: 9,\n      coordinates: [51.522776, -2.579259],\n      description: \"Test Me!\",\n      complete: false\n    }],\n    Fact: [{\n      id: 1,\n      coordinates: [51.523226, -2.578289],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 2,\n      coordinates: [51.523265, -2.577975],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 3,\n      coordinates: [51.523405, -2.578095],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 4,\n      coordinates: [51.523485, -2.578159],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 5,\n      coordinates: [51.523425, -2.578509],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 6,\n      coordinates: [51.523315, -2.578549],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 7,\n      coordinates: [51.523116, -2.578329],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 8,\n      coordinates: [51.523066, -2.578419],\n      description: \"Learn!\",\n      complete: false\n    }, {\n      id: 9,\n      coordinates: [51.522756, -2.579059],\n      description: \"Learn!\",\n      complete: false\n    }],\n    Game: [{\n      id: 1,\n      coordinates: [51.523213, -2.578062],\n      description: \"Let's Play!\",\n      complete: false\n    }]\n  }\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  const watch = true;\n  const {\n    latitude,\n    longitude\n  } = usePosition(watch, {\n    enableHighAccuracy: true\n  });\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 21,\n      defaultCenter: {\n        lat: 51.523176,\n        lng: -2.578209\n      } // center={{ lat: latitude, lng: longitude }}\n      ,\n      options: {\n        fullscreenControl: false,\n        zoomControl: false,\n        streetViewControl: false,\n        mapTypeControl: false,\n        // draggable: false,\n        clickableIcons: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GroundOverlay, {\n      bounds: new google.maps.LatLngBounds(new google.maps.LatLng(51.522800, -2.578910), new google.maps.LatLng(51.523655, -2.577485)),\n      url: MapOverlay,\n      opacity: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: latitude,\n        lng: longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }), Interaction.locations.Quiz.map(interaction => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      key: interaction.id,\n      position: {\n        lat: interaction.coordinates[0],\n        lng: interaction.coordinates[1]\n      },\n      onClick: () => {\n        interaction.complete === false ? setSelectedInteraction(interaction) : console.log(\"N/A\");\n      },\n      icon: !interaction.complete && QuizIncomplete || interaction.complete && QuizComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 25\n      }\n    }))), Interaction.locations.Fact.map(interaction => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      key: interaction.id,\n      position: {\n        lat: interaction.coordinates[0],\n        lng: interaction.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interaction);\n        console.log(selectedInteraction);\n      },\n      icon: !interaction.complete && QuizIncomplete || interaction.complete && QuizComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }\n    }))), Interaction.locations.Game.map(interaction => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      key: interaction.id,\n      position: {\n        lat: interaction.coordinates[0],\n        lng: interaction.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interaction);\n        console.log(selectedInteraction);\n      },\n      icon: GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 25\n      }\n    }))), // Function for if the button pressed is a QUIZ button\n    selectedInteraction === Interaction.locations.Quiz[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000033,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-one-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction === Interaction.locations.Quiz[1] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000033,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-two-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[2] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-three-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[3] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-four-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[4] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-five-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[5] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-six-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[6] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-seven-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[7] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-eight-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Quiz[8] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-nine-quiz\",\n      className: \"basic-btn quiz-btn\",\n      onClick: () => {\n        selectedInteraction.complete = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))), selectedInteraction == Interaction.locations.Fact[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-one-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[1] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-two-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[2] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-three-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[3] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-four-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[4] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-five-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[5] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-six-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[6] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-seven-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[7] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-eight-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || selectedInteraction == Interaction.locations.Fact[8] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/section-nine-fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useState","Link","usePosition","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","GroundOverlay","Interaction","locations","Quiz","id","coordinates","description","complete","Fact","Game","UnwrappedMap","selectedInteraction","setSelectedInteraction","watch","latitude","longitude","enableHighAccuracy","lat","lng","fullscreenControl","zoomControl","streetViewControl","mapTypeControl","clickableIcons","google","maps","LatLngBounds","LatLng","MapOverlay","map","interaction","console","log","QuizIncomplete","QuizComplete","GameIcon","type","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,WAAT,QAA4B,cAA5B;AAEA,SACIC,SADJ,EAEIC,YAFJ,EAGIC,aAHJ,EAIIC,MAJJ,EAKIC,UALJ,EAMIC,aANJ,QAOO,m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","sourcesContent":["// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"FactFormat\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"FactFormat\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\n/* global google */\nimport React, {useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport { usePosition } from 'use-position';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow,\n    GroundOverlay\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIncomplete from './assets/quiz-icon.svg';\nimport QuizComplete from './assets/quiz-complete.svg';\nimport FactIncomplete from './assets/fact-icon.svg';\nimport MapOverlay from './assets/main-building.svg';\n\n// Impromptu JSON data for locations\nexport const Interaction = {\n    locations: {\n        Quiz: [\n            {\n                id: 1,\n                coordinates: [51.523176, -2.578209],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 2,\n                coordinates: [51.523315, -2.578260],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 3,\n                coordinates: [51.523365, -2.578005],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 4,\n                coordinates: [51.523565, -2.578309],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 5,\n                coordinates: [51.523395, -2.578309],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 6,\n                coordinates: [51.523265, -2.578649],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 7,\n                coordinates: [51.523176, -2.578409],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 8,\n                coordinates: [51.523076, -2.578259],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 9,\n                coordinates: [51.522776, -2.579259],\n                description: \"Test Me!\",\n                complete: false,\n            },\n        ],\n\n        Fact: [\n            {\n                id: 1,\n                coordinates: [51.523226, -2.578289],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 2,\n                coordinates: [51.523265, -2.577975],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 3,\n                coordinates: [51.523405, -2.578095],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 4,\n                coordinates: [51.523485, -2.578159],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 5,\n                coordinates: [51.523425, -2.578509],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 6,\n                coordinates: [51.523315, -2.578549],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 7,\n                coordinates: [51.523116, -2.578329],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 8,\n                coordinates: [51.523066, -2.578419],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 9,\n                coordinates: [51.522756, -2.579059],\n                description: \"Learn!\",\n                complete: false\n            },\n        ],\n\n        Game: [\n            {\n                id: 1,\n                coordinates: [51.523213, -2.578062],\n                description: \"Let's Play!\",\n                complete: false\n            }\n        ]\n    },\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    const watch = true;\n    const { latitude, longitude } =\n        usePosition(watch, {enableHighAccuracy: true});\n\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={21}\n            defaultCenter={{lat: 51.523176, lng: -2.578209}}\n            // center={{ lat: latitude, lng: longitude }}\n            options={{\n                fullscreenControl: false,\n                zoomControl: false,\n                streetViewControl: false,\n                mapTypeControl: false,\n                // draggable: false,\n                clickableIcons: false,\n            }}\n        >\n            <GroundOverlay\n                bounds={new google.maps.LatLngBounds(\n                    new google.maps.LatLng(51.522800, -2.578910),\n                    new google.maps.LatLng(51.523655, -2.577485)\n                )}\n                url={MapOverlay}\n                opacity={1}\n            />\n\n            {/* User Location Marker*/}\n            <Marker\n                position={{ lat: latitude, lng: longitude }}\n            />\n\n            {/* Interaction Markers */}\n            {\n                Interaction.locations.Quiz.map ((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                interaction.complete === false ?\n                                    setSelectedInteraction(interaction) :\n                                    console.log(\"N/A\")\n                            }}\n                            icon={\n                                !interaction.complete && (\n                                    QuizIncomplete\n                                ) ||\n                                interaction.complete && (\n                                    QuizComplete\n                                )\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                Interaction.locations.Fact.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                                console.log(selectedInteraction)\n                            }}\n                            icon={\n                                !interaction.complete && (\n                                    QuizIncomplete\n                                ) ||\n                                interaction.complete && (\n                                    QuizComplete\n                                )\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                Interaction.locations.Game.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                                console.log(selectedInteraction)\n                            }}\n                            icon={GameIcon}\n                        />\n                    </div>\n                ))\n            }\n            {/* End of Interaction Markers */}\n\n            {/* Selecting Interaction Section */}\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations.Quiz[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-one-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction === Interaction.locations.Quiz[1] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-two-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[2] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-three-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[3] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-four-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[4] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-five-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[5] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-six-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[6] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-seven-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[7] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-eight-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[8] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-nine-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n\n            {\n                selectedInteraction == Interaction.locations.Fact[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-one-fact\"\n                                    className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[1] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-two-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[2] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-three-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[3] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-four-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[4] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-five-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[5] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-six-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[6] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-seven-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[7] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-eight-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[8] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/section-nine-fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}