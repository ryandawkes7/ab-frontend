{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Documents/React Projects/aero-client/Aerospace-Project/aerospace-client/src/components/quiz/quiz.js\";\n// import React, {Component} from 'react';\n// import { Link } from 'react-router-dom';\n// import Back from \"../backButton/back\";\n// import './quiz.css'\n//\n// const quizData = [\n//     {\n//         key: \"1\",\n//         question: \"What is the museum called?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"2\",\n//         question: \"What are the foxes called?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n//     {\n//         key: \"3\",\n//         question: \"What is the museum called 2?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"4\",\n//         question: \"What are the foxes called 2?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n// ]\n//\n// class Popup extends Component {\n//     render(){\n//         return(\n//             <div className=\"popup\">\n//                 <div className=\"popup-inner\">\n//                     <h1>{this.props.text}</h1>\n//                     <button onClick={this.props.closePopup}>Close</button>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// class ResultsEnd extends Component {\n//     render() {\n//         const score = this.props.correctCount * 50;\n//         var menuLink = <Link to='/game-menu'>Back to Menu</Link>\n//\n//         return (\n//             <div className=\"score\">\n//                 <h3>You Gained {score} points!</h3>\n//                 <hr/>\n//                 <h3>{menuLink}</h3>\n//             </div>\n//         )\n//     }\n// }\n//\n// class Quiz extends Component {\n//     // Sets props and state to set values\n//     constructor (props) {\n//         super(props);\n//         this.state = {\n//             question: quizData[0].question,\n//             qsNo: 0,\n//             options: quizData[0].options,\n//             correctAnswer: \"Bristol Aerospace Museum\",\n//             correctCount: 0,\n//             incorrectCount: 0,\n//             flashMsg: \"\",\n//             score: 0,\n//             showPopup: false\n//         }\n//\n//         this.handleNavigation = this.handleNavigation.bind(this);\n//         this.handleAnswerClick = this.handleAnswerClick.bind(this);\n//\n//     }\n//\n//     // Function for when the user presses next/previous button\n//     handleNavigation(event){\n//\n//         // Event for when the user presses the next button\n//         // If the event is set to 'next' and there are still questions left...\n//         if(event === \"next\" && (this.state.qsNo < quizData.length - 1)) {\n//             console.log(this.state.qsNo + 1);\n//             // Add one to the Question No. value and pass data for the next question\n//             this.setState({ qsNo:(this.state.qsNo + 1) }, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options,\n//                     correctAnswer: quizData[this.state.qsNo].correct\n//                 })\n//             });\n//         // Otherwise, if the event is 'next' but there are no questions left in the data...\n//         } else if(event === \"next\" && (this.state.qsNo >= quizData.length - 1)) {\n//             // Set score counter to the user's overall score\n//             this.setState({\n//                 score: (this.state.correctCount * 50)\n//             })\n//             console.log(\"Game Over! Your score is \" + this.state.correctCount * 50)\n//         }\n//\n//         // Event for when the user presses the previous button\n//         // Unused, but goes back a question if the user clicks the previous button\n//\n//         if(event === \"previous\" && (this.state.qsNo >= 1)) {\n//             console.log(\"prvs\");\n//             this.setState({ qsNo:(this.state.qsNo - 1)}, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options\n//                 })\n//             });\n//         }\n//     }\n//\n//     // Function for when the user presses one of the answer buttons\n//     handleAnswerClick(option) {\n//         // Causes the next question to pop up\n//         // this.handleNavigation(\"next\");\n//         console.log(option); // Logs the answer that the user selects\n//\n//         // If the user selects the correct answer...\n//         if(this.state.correctAnswer === option){\n//             console.log(\"Correct\");\n//             // Add one to their correct answers count\n//             this.setState({correctCount: this.state.correctCount + 1})\n//         } else {\n//             // If not, then add one point to the incorrect score count\n//             this.setState({incorrectCount: this.state.incorrectCount + 1})\n//         }\n//     }\n//\n//     render () {\n//         return (\n//             <div className=\"quiz-container\">\n//                 <Back />\n//\n//                 {this.state.qsNo >= quizData.length - 1 &&\n//                     <ResultsEnd score={this.state.correctCount} />\n//                 }\n//                 { this.state.qsNo < quizData.length - 1 &&\n//\n//                     <Question questionData={ this.state.question }/> &&\n//\n//                     <Answers\n//                     options={ this.state.options }\n//                     onAnswerClick={ this.handleAnswerClick }\n//                     onClickFromParent={ this.handleNavigation }\n//                     /> &&\n//                     <Results\n//                     correctCount={ this.state.correctCount }\n//                     incorrectCount={ this.state.incorrectCount }\n//                     /> &&\n//                     <Navigation onClickFromParent={ this.handleNavigation }/>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// // Question tag (uses props)\n// const Question = (props) => {\n//     return(\n//         <div>\n//             <div className=\"question-component\">\n//                 <h3>{props.questionData}</h3>\n//             </div>\n//         </div>\n//     )\n// }\n//\n// // Answer tag\n// const Answers = (props) => {\n//     // Creates 'passOption' prop with event equal to the value of the answers from the data (via props)\n//     function passOption(e) {\n//         props.onAnswerClick(e);\n//\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//\n//     // Returns answers as text in the buttons. The 'onClick' contains a function that stores the data of the answer.\n//     // This is then run in the props where the answer is set to the answer clicked, being determined whether its\n//     // correct or incorrect.\n//     return(\n//         <div className=\"answer-container\" aria-disabled>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer1) }}\n//             >\n//                 {props.options.answer1}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer2) }}>{props.options.answer2}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer3) }}>{props.options.answer3}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer4) }}>{props.options.answer4}\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Navigation tag\n// const Navigation = (props) => {\n//     // Creates next button variable that calls the \"next\" event from 'handleNavigation'\n//     const clickNext = () => {\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//     const clickPrevious = () => {\n//         return(props.onClickFromParent(\"previous\"));\n//     }\n//\n//     return(\n//         <div>\n//             <button\n//                 className=\"p-info-next\"\n//                 onClick={clickNext}\n//             >\n//                 Next\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Score counter tag\n// const Results = (props) => {\n//         return(\n//             <div>\n//                 <h4>Score: {props.correctCount * 50}</h4>\n//                 Correct: {props.correctCount} | Incorrect: {props.incorrectCount}\n//             </div>\n//         )\n// }\n//\n// export default Quiz;\nimport React, { Component } from 'react';\nimport './quiz.css';\nimport { Link } from 'react-router-dom'; // Question Component\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    e.preventDefault(); //Prevents full refresh\n\n    this.props.onChoiceChange(e.target.value);\n  }\n\n  render() {\n    const question = this.props.question; // Variable set to equal question from props\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }\n    }, question.text), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }), question.choices.map(choice => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answer-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.handleChange,\n        name: question.id,\n        value: choice.id,\n        className: \"answer-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 33\n        }\n      }, choice.text), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: this.handleChange,\n        name: question.id,\n        value: choice.id,\n        className: \"answer-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 33\n        }\n      }, choice.text));\n    }));\n  }\n\n} // Results Component\n\n\nclass Scorebox extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"well\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 13\n      }\n    }, \"Question \", this.props.current, \" out of \", this.props.total, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pull-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 46\n      }\n    }, \"Score: \", this.props.score)));\n  }\n\n}\n\nclass Results extends Component {\n  render() {\n    const score = this.props.score;\n    const total = this.props.total;\n    const percent = score / total * 100;\n    var message = 'You passed the quiz!';\n    var link = /*#__PURE__*/React.createElement(Link, {\n      to: \"/game-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 20\n      }\n    }, \"Back to Menu\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"well\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }\n    }, \"You got \", score, \" out of \", total, \" correct.\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, percent, \"% - \", percent > 60 ? message : link));\n  }\n\n}\n\nclass QuizFormat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      current: 1\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(choice) {\n    this.setState((prevState, props) => ({\n      current: prevState.current + 1,\n      score: choice === props.questions[prevState.current - 1].correct ? prevState.score + 1 : prevState.score\n    }));\n  }\n\n  render() {\n    const questions = this.props.questions;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    }, this.state.current > questions.length && /*#__PURE__*/React.createElement(Results, {\n      total: questions.length,\n      score: this.state.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 21\n      }\n    }), this.state.current <= questions.length && /*#__PURE__*/React.createElement(Scorebox, {\n      total: questions.length,\n      current: this.state.current,\n      score: this.state.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }\n    }), this.state.current <= questions.length && /*#__PURE__*/React.createElement(Question, {\n      question: questions[this.state.current - 1],\n      onChoiceChange: this.handleChange,\n      className: \"answer-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nvar QUESTIONS = [{\n  id: 1,\n  text: 'What is my name?',\n  choices: [{\n    id: 'a',\n    text: 'Ryan'\n  }, {\n    id: 'b',\n    text: 'Michael'\n  }, {\n    id: 'c',\n    text: 'James'\n  }, {\n    id: 'd',\n    text: 'Reece'\n  }],\n  correct: 'a'\n}, {\n  id: 2,\n  text: 'What is this museum called?',\n  choices: [{\n    id: 'a',\n    text: 'Bristol Museum'\n  }, {\n    id: 'b',\n    text: 'Bristol Aerospace Museum'\n  }, {\n    id: 'c',\n    text: 'Aviation Museum'\n  }, {\n    id: 'd',\n    text: 'Bristol'\n  }],\n  correct: 'b'\n}];\nexport default class Quiz extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(QuizFormat, {\n      questions: QUESTIONS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ryandawkes/Documents/React Projects/aero-client/Aerospace-Project/aerospace-client/src/components/quiz/quiz.js"],"names":["React","Component","Link","Question","constructor","props","handleChange","bind","e","preventDefault","onChoiceChange","target","value","render","question","text","choices","map","choice","id","Scorebox","current","total","score","Results","percent","message","link","QuizFormat","state","setState","prevState","questions","correct","length","QUESTIONS","Quiz"],"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","sourcesContent":["// import React, {Component} from 'react';\n// import { Link } from 'react-router-dom';\n// import Back from \"../backButton/back\";\n// import './quiz.css'\n//\n// const quizData = [\n//     {\n//         key: \"1\",\n//         question: \"What is the museum called?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"2\",\n//         question: \"What are the foxes called?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n//     {\n//         key: \"3\",\n//         question: \"What is the museum called 2?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"4\",\n//         question: \"What are the foxes called 2?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n// ]\n//\n// class Popup extends Component {\n//     render(){\n//         return(\n//             <div className=\"popup\">\n//                 <div className=\"popup-inner\">\n//                     <h1>{this.props.text}</h1>\n//                     <button onClick={this.props.closePopup}>Close</button>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// class ResultsEnd extends Component {\n//     render() {\n//         const score = this.props.correctCount * 50;\n//         var menuLink = <Link to='/game-menu'>Back to Menu</Link>\n//\n//         return (\n//             <div className=\"score\">\n//                 <h3>You Gained {score} points!</h3>\n//                 <hr/>\n//                 <h3>{menuLink}</h3>\n//             </div>\n//         )\n//     }\n// }\n//\n// class Quiz extends Component {\n//     // Sets props and state to set values\n//     constructor (props) {\n//         super(props);\n//         this.state = {\n//             question: quizData[0].question,\n//             qsNo: 0,\n//             options: quizData[0].options,\n//             correctAnswer: \"Bristol Aerospace Museum\",\n//             correctCount: 0,\n//             incorrectCount: 0,\n//             flashMsg: \"\",\n//             score: 0,\n//             showPopup: false\n//         }\n//\n//         this.handleNavigation = this.handleNavigation.bind(this);\n//         this.handleAnswerClick = this.handleAnswerClick.bind(this);\n//\n//     }\n//\n//     // Function for when the user presses next/previous button\n//     handleNavigation(event){\n//\n//         // Event for when the user presses the next button\n//         // If the event is set to 'next' and there are still questions left...\n//         if(event === \"next\" && (this.state.qsNo < quizData.length - 1)) {\n//             console.log(this.state.qsNo + 1);\n//             // Add one to the Question No. value and pass data for the next question\n//             this.setState({ qsNo:(this.state.qsNo + 1) }, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options,\n//                     correctAnswer: quizData[this.state.qsNo].correct\n//                 })\n//             });\n//         // Otherwise, if the event is 'next' but there are no questions left in the data...\n//         } else if(event === \"next\" && (this.state.qsNo >= quizData.length - 1)) {\n//             // Set score counter to the user's overall score\n//             this.setState({\n//                 score: (this.state.correctCount * 50)\n//             })\n//             console.log(\"Game Over! Your score is \" + this.state.correctCount * 50)\n//         }\n//\n//         // Event for when the user presses the previous button\n//         // Unused, but goes back a question if the user clicks the previous button\n//\n//         if(event === \"previous\" && (this.state.qsNo >= 1)) {\n//             console.log(\"prvs\");\n//             this.setState({ qsNo:(this.state.qsNo - 1)}, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options\n//                 })\n//             });\n//         }\n//     }\n//\n//     // Function for when the user presses one of the answer buttons\n//     handleAnswerClick(option) {\n//         // Causes the next question to pop up\n//         // this.handleNavigation(\"next\");\n//         console.log(option); // Logs the answer that the user selects\n//\n//         // If the user selects the correct answer...\n//         if(this.state.correctAnswer === option){\n//             console.log(\"Correct\");\n//             // Add one to their correct answers count\n//             this.setState({correctCount: this.state.correctCount + 1})\n//         } else {\n//             // If not, then add one point to the incorrect score count\n//             this.setState({incorrectCount: this.state.incorrectCount + 1})\n//         }\n//     }\n//\n//     render () {\n//         return (\n//             <div className=\"quiz-container\">\n//                 <Back />\n//\n//                 {this.state.qsNo >= quizData.length - 1 &&\n//                     <ResultsEnd score={this.state.correctCount} />\n//                 }\n//                 { this.state.qsNo < quizData.length - 1 &&\n//\n//                     <Question questionData={ this.state.question }/> &&\n//\n//                     <Answers\n//                     options={ this.state.options }\n//                     onAnswerClick={ this.handleAnswerClick }\n//                     onClickFromParent={ this.handleNavigation }\n//                     /> &&\n//                     <Results\n//                     correctCount={ this.state.correctCount }\n//                     incorrectCount={ this.state.incorrectCount }\n//                     /> &&\n//                     <Navigation onClickFromParent={ this.handleNavigation }/>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// // Question tag (uses props)\n// const Question = (props) => {\n//     return(\n//         <div>\n//             <div className=\"question-component\">\n//                 <h3>{props.questionData}</h3>\n//             </div>\n//         </div>\n//     )\n// }\n//\n// // Answer tag\n// const Answers = (props) => {\n//     // Creates 'passOption' prop with event equal to the value of the answers from the data (via props)\n//     function passOption(e) {\n//         props.onAnswerClick(e);\n//\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//\n//     // Returns answers as text in the buttons. The 'onClick' contains a function that stores the data of the answer.\n//     // This is then run in the props where the answer is set to the answer clicked, being determined whether its\n//     // correct or incorrect.\n//     return(\n//         <div className=\"answer-container\" aria-disabled>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer1) }}\n//             >\n//                 {props.options.answer1}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer2) }}>{props.options.answer2}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer3) }}>{props.options.answer3}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer4) }}>{props.options.answer4}\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Navigation tag\n// const Navigation = (props) => {\n//     // Creates next button variable that calls the \"next\" event from 'handleNavigation'\n//     const clickNext = () => {\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//     const clickPrevious = () => {\n//         return(props.onClickFromParent(\"previous\"));\n//     }\n//\n//     return(\n//         <div>\n//             <button\n//                 className=\"p-info-next\"\n//                 onClick={clickNext}\n//             >\n//                 Next\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Score counter tag\n// const Results = (props) => {\n//         return(\n//             <div>\n//                 <h4>Score: {props.correctCount * 50}</h4>\n//                 Correct: {props.correctCount} | Incorrect: {props.incorrectCount}\n//             </div>\n//         )\n// }\n//\n// export default Quiz;\n\nimport React, {Component} from 'react';\nimport './quiz.css';\nimport { Link } from 'react-router-dom';\n\n// Question Component\nclass Question extends Component {\n    constructor(props){\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        e.preventDefault(); //Prevents full refresh\n        this.props.onChoiceChange(e.target.value);\n    }\n\n    render(){\n        const question = this.props.question; // Variable set to equal question from props\n\n        return(\n            <div>\n                <h3>{question.text}</h3>\n                <hr />\n                    { question.choices.map(choice => {\n                        return(\n                            <div className=\"answer-container\">\n                                <button\n                                    type=\"submit\"\n                                    onClick={this.handleChange}\n                                    name={question.id}\n                                    value={choice.id}\n                                    className=\"answer-btn\"\n                                >\n                                {choice.text}\n                                </button>\n                                <button\n                                    type=\"submit\"\n                                    onClick={this.handleChange}\n                                    name={question.id}\n                                    value={choice.id}\n                                    className=\"answer-btn\"\n                                >\n                                    {choice.text}\n                                </button>\n                            </div>\n                        )\n                    })}\n            </div>\n        )\n    }\n}\n\n// Results Component\nclass Scorebox extends Component {\n    render(){\n        return(\n            <div className=\"well\">\n                Question {this.props.current} out of {this.props.total}\n                <span className=\"pull-right\"><strong>Score: {this.props.score}</strong></span>\n            </div>\n        )\n    }\n}\n\nclass Results extends Component {\n    render(){\n        const score = this.props.score;\n        const total = this.props.total;\n        const percent = score/total*100;\n        var message = 'You passed the quiz!';\n        var link = <Link to=\"/game-menu\">Back to Menu</Link>\n\n        return(\n            <div className=\"well\">\n                <h4>You got {score} out of {total} correct.</h4>\n                <hr />\n                <h3>{percent}% - {percent > 60 ? message : link}</h3>\n            </div>\n        )\n    }\n}\n\nclass QuizFormat extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            score: 0,\n            current: 1\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(choice){\n        this.setState((prevState, props) => ({\n            current: prevState.current + 1,\n            score: choice === props.questions[prevState.current - 1].correct ? prevState.score + 1 : prevState.score\n        }));\n    }\n\n    render () {\n        const questions = this.props.questions;\n        return (\n            <div>\n                {this.state.current > questions.length &&\n                    <Results total={questions.length} score={this.state.score}/>\n                }\n\n                {this.state.current <= questions.length &&\n                    <Scorebox total={questions.length} current={this.state.current} score={this.state.score}/>\n                }\n\n                {this.state.current <= questions.length &&\n                    <Question\n                        question={questions[this.state.current - 1]}\n                        onChoiceChange={this.handleChange}\n                        className=\"answer-btn\"\n                    />\n                }\n\n            </div>\n        );\n    }\n}\n\nvar QUESTIONS= [\n    {\n        id: 1,\n        text: 'What is my name?',\n        choices:[\n            {\n                id: 'a',\n                text: 'Ryan'\n            },\n            {\n                id: 'b',\n                text: 'Michael'\n            },\n            {\n                id: 'c',\n                text: 'James'\n            },\n            {\n                id: 'd',\n                text: 'Reece'\n            }\n        ],\n        correct: 'a'\n    },\n    {\n        id: 2,\n        text: 'What is this museum called?',\n        choices:[\n            {\n                id: 'a',\n                text: 'Bristol Museum'\n            },\n            {\n                id: 'b',\n                text: 'Bristol Aerospace Museum'\n            },\n            {\n                id: 'c',\n                text: 'Aviation Museum'\n            },\n            {\n                id: 'd',\n                text: 'Bristol'\n            }\n        ],\n        correct: 'b'\n    },\n]\n\nexport default class Quiz extends Component {\n    render() {\n        return(\n            <QuizFormat questions={QUESTIONS}/>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}