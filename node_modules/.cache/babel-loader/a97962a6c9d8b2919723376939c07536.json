{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTest/mapTest.js\";\nimport React, { Component } from 'react';\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.handleMarkerClick = () => {\n      this.setState({\n        isMarkerShown: false\n      });\n      this.delayedShowMarker();\n    };\n\n    this.getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLocation: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLocation: {\n        latitude: null,\n        longitude: null\n      },\n      isMarkerShown: false\n    };\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  componentWillUpdate() {\n    this.getLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  // getLocation() {\n  //     if(navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n  //     } else {\n  //         alert(\"Geolocation not supported by this browser\");\n  //     }\n  // }\n  // getCoordinates(position) {\n  //     this.setState({\n  //         latitude: position.coords.latitude,\n  //         longitude: position.coords.longitude\n  //     })\n  // }\n  //\n  // //Error Handling\n  // handleLocationError(error) {\n  //     switch(error.code){\n  //         case error.PERMISSION_DENIED:\n  //             alert(\"Denied request for Geolocation\")\n  //             break;\n  //         case error.POSITION_UNAVAILABLE:\n  //             alert(\"Location info is unavailable\")\n  //             break;\n  //         case error.TIMEOUT:\n  //             alert(\"Location request has timed out\")\n  //             break;\n  //         case error.UNKNOWN_ERR:\n  //             alert(\"An unknown error occurred\")\n  //             break;\n  //         default:\n  //             alert(\"An unknown error occurred\")\n  //     }\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default MapTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTest/mapTest.js"],"names":["React","Component","MapTest","constructor","props","delayedShowMarker","setTimeout","getLocation","setState","isMarkerShown","handleMarkerClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","prevState","currentLocation","currentLatLng","lat","latitude","lng","longitude","state","bind","componentWillUpdate","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAGA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC5BE,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SAoBpBC,iBApBoB,GAoBA,MAAM;AACtBC,MAAAA,UAAU,CAAC,MAAM;AACb,aAAKC,WAAL;AACA,aAAKC,QAAL,CAAc;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH,OAHS,EAGP,IAHO,CAAV;AAIH,KAzBmB;;AAAA,SA2BpBC,iBA3BoB,GA2BA,MAAM;AACtB,WAAKF,QAAL,CAAc;AAAEC,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACA,WAAKJ,iBAAL;AACH,KA9BmB;;AAAA,SAgCpBE,WAhCoB,GAgCN,MAAM;AAChB,UAAGI,SAAS,CAACC,WAAb,EAA0B;AACtBD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACIC,QAAQ,IAAI;AACRC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB;AACA,eAAKT,QAAL,CAAcU,SAAS,KAAK;AACxBC,YAAAA,eAAe,EAAE,EACb,GAAGD,SAAS,CAACE,aADA;AAEbC,cAAAA,GAAG,EAAEP,QAAQ,CAACG,MAAT,CAAgBK,QAFR;AAGbC,cAAAA,GAAG,EAAET,QAAQ,CAACG,MAAT,CAAgBO;AAHR;AADO,WAAL,CAAvB;AAOH,SAVL;AAYH,OAbD,MAaO;AACHT,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,KAjDmB;;AAEhB,SAAKS,KAAL,GAAa;AACTN,MAAAA,eAAe,EAAE;AACbG,QAAAA,QAAQ,EAAE,IADG;AAEbE,QAAAA,SAAS,EAAE;AAFE,OADR;AAKTf,MAAAA,aAAa,EAAE;AALN,KAAb;AAOA,SAAKF,WAAL,GAAmB,KAAKA,WAAL,CAAiBmB,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDC,EAAAA,mBAAmB,GAAI;AACnB,SAAKpB,WAAL;AACH;;AAEDqB,EAAAA,iBAAiB,GAAI;AACjB,SAAKvB,iBAAL;AACH;;AAgCD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAwB,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAeH;;AAvG2B;;AA0GhC,eAAe3B,OAAf","sourcesContent":["import React, {Component} from 'react';\n\n\nclass MapTest extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            currentLocation: {\n                latitude: null,\n                longitude: null,\n            },\n            isMarkerShown: false\n        };\n        this.getLocation = this.getLocation.bind(this);\n    }\n\n    componentWillUpdate () {\n        this.getLocation()\n    }\n\n    componentDidMount () {\n        this.delayedShowMarker()\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    handleMarkerClick = () => {\n        this.setState({ isMarkerShown: false })\n        this.delayedShowMarker()\n    }\n\n    getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLocation: {\n                            ...prevState.currentLatLng,\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n    // getLocation() {\n    //     if(navigator.geolocation) {\n    //         navigator.geolocation.getCurrentPosition(this.getCoordinates, this.handleLocationError);\n    //     } else {\n    //         alert(\"Geolocation not supported by this browser\");\n    //     }\n    // }\n\n    // getCoordinates(position) {\n    //     this.setState({\n    //         latitude: position.coords.latitude,\n    //         longitude: position.coords.longitude\n    //     })\n    // }\n    //\n    // //Error Handling\n    // handleLocationError(error) {\n    //     switch(error.code){\n    //         case error.PERMISSION_DENIED:\n    //             alert(\"Denied request for Geolocation\")\n    //             break;\n    //         case error.POSITION_UNAVAILABLE:\n    //             alert(\"Location info is unavailable\")\n    //             break;\n    //         case error.TIMEOUT:\n    //             alert(\"Location request has timed out\")\n    //             break;\n    //         case error.UNKNOWN_ERR:\n    //             alert(\"An unknown error occurred\")\n    //             break;\n    //         default:\n    //             alert(\"An unknown error occurred\")\n    //     }\n    // }\n\n\n    render () {\n        return (\n            <div>\n                {/*<h2>React Geolocation Example</h2>*/}\n                {/*<button onClick={this.getLocation}>Get Coordinates</button>*/}\n                {/*<h4>HTML5 Coordinates</h4>*/}\n                {/*<p>Latitude: {this.state.latitude}</p>*/}\n                {/*<p>Longitude: {this.state.longitude}</p>*/}\n                {/*<p>Address: {this.state.userAddress}</p>*/}\n                {/*{this.state.latitude && this.state.longitude ?*/}\n                {/*    <img src={`https://maps.googleapis.com/maps/api/staticmap?center=${this.state.latitude},${this.state.longitude}&zoom=14&size=400x300&sensor=false&markers=color:red%7C${this.state.latitude},${this.state.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`} alt=\"\"/>*/}\n                {/*    :*/}\n                {/*    null*/}\n                {/*}*/}\n            </div>\n        );\n    }\n}\n\nexport default MapTest;\n"]},"metadata":{},"sourceType":"module"}