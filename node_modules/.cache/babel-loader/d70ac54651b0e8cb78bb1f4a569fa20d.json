{"ast":null,"code":"import _slicedToArray from\"/Users/ryandawkes/Desktop/aero-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"FactFormat\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"FactFormat\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n/* global google */import React,{useState}from'react';import'./map.css';import{Link}from'react-router-dom';import{usePosition}from'use-position';import{GoogleMap,withScriptjs,withGoogleMap,Marker,InfoWindow,GroundOverlay}from'react-google-maps';import GameIcon from\"./assets/game-icon.svg\";import QuizIncomplete from\"./assets/quiz-icon.svg\";import QuizComplete from\"./assets/quiz-complete.svg\";import FactIncomplete from\"./assets/fact-icon.svg\";import FactComplete from\"./assets/fact-complete.svg\";import PicIncomplete from\"./assets/picture-incomplete.svg\";import PicComplete from\"./assets/picture-complete.svg\";import MapOverlay from\"./assets/main-building.svg\";// Impromptu JSON data for locations\nexport var Interaction={locations:{Quiz:[{id:1,coordinates:[51.523176,-2.578209],description:\"Test Me!\",complete:false},{id:2,coordinates:[51.523315,-2.578260],description:\"Test Me!\",complete:false},{id:3,coordinates:[51.523365,-2.578005],description:\"Test Me!\",complete:false},{id:4,coordinates:[51.523565,-2.578309],description:\"Test Me!\",complete:false},{id:5,coordinates:[51.523395,-2.578309],description:\"Test Me!\",complete:false},{id:6,coordinates:[51.523265,-2.578649],description:\"Test Me!\",complete:false},{id:7,coordinates:[51.523176,-2.578409],description:\"Test Me!\",complete:false},{id:8,coordinates:[51.523076,-2.578259],description:\"Test Me!\",complete:false},{id:9,coordinates:[51.522776,-2.579259],description:\"Test Me!\",complete:false}],Fact:[{id:1,coordinates:[51.523226,-2.578289],description:\"Learn!\",complete:false},{id:2,coordinates:[51.523265,-2.577975],description:\"Learn!\",complete:false},{id:3,coordinates:[51.523405,-2.578095],description:\"Learn!\",complete:false},{id:4,coordinates:[51.523485,-2.578159],description:\"Learn!\",complete:false},{id:5,coordinates:[51.523425,-2.578509],description:\"Learn!\",complete:false},{id:6,coordinates:[51.523315,-2.578549],description:\"Learn!\",complete:false},{id:7,coordinates:[51.523116,-2.578329],description:\"Learn!\",complete:false},{id:8,coordinates:[51.523066,-2.578419],description:\"Learn!\",complete:false},{id:9,coordinates:[51.522756,-2.579059],description:\"Learn!\",complete:false}],Game:[{id:1,coordinates:[51.523213,-2.578062],description:\"Let's Play!\",complete:false}],Picture:[{id:1,coordinates:[51.523273,-2.578122],description:\"Snap a Photo!\",complete:false}]}};function UnwrappedMap(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedInteraction=_useState2[0],setSelectedInteraction=_useState2[1];var watch=true;var _usePosition=usePosition(watch,{enableHighAccuracy:true}),latitude=_usePosition.latitude,longitude=_usePosition.longitude;return/*#__PURE__*/ (// Creates map\nReact.createElement(GoogleMap,{defaultZoom:21,defaultCenter:{lat:51.523176,lng:-2.578209}// center={{ lat: latitude, lng: longitude }}\n,options:{fullscreenControl:false,zoomControl:false,streetViewControl:false,mapTypeControl:false,// draggable: false,\nclickableIcons:false}},/*#__PURE__*/React.createElement(GroundOverlay,{bounds:new google.maps.LatLngBounds(new google.maps.LatLng(51.522800,-2.578910),new google.maps.LatLng(51.523655,-2.577485)),url:MapOverlay,opacity:1}),/*#__PURE__*/React.createElement(Marker,{position:{lat:latitude,lng:longitude}}),Interaction.locations.Quiz.map(function(interaction){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Marker,{key:interaction.id,position:{lat:interaction.coordinates[0],lng:interaction.coordinates[1]},onClick:function onClick(){interaction.complete===false?setSelectedInteraction(interaction):console.log(\"N/A\");},icon:!interaction.complete&&QuizIncomplete||interaction.complete&&QuizComplete}));}),Interaction.locations.Fact.map(function(interaction){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Marker,{key:interaction.id,position:{lat:interaction.coordinates[0],lng:interaction.coordinates[1]},onClick:function onClick(){setSelectedInteraction(interaction);console.log(selectedInteraction);},icon:!interaction.complete&&FactIncomplete||interaction.complete&&FactComplete}));}),Interaction.locations.Game.map(function(interaction){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Marker,{key:interaction.id,position:{lat:interaction.coordinates[0],lng:interaction.coordinates[1]},onClick:function onClick(){setSelectedInteraction(interaction);console.log(selectedInteraction);},icon:GameIcon}));}),Interaction.locations.Picture.map(function(interaction){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Marker,{key:interaction.id,position:{lat:interaction.coordinates[0],lng:interaction.coordinates[1]},onClick:function onClick(){setSelectedInteraction(interaction);console.log(selectedInteraction);},icon:!interaction.complete&&PicIncomplete||interaction.complete&&PicComplete}));}),// Function for if the button pressed is a QUIZ button\nselectedInteraction===Interaction.locations.Quiz[0]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-one-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction===Interaction.locations.Quiz[1]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-two-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[2]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-three-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[3]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-four-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[4]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-five-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[5]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-six-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[6]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-seven-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[7]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-eight-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Quiz[8]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-nine-quiz\",className:\"basic-btn quiz-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description))))),selectedInteraction==Interaction.locations.Fact[0]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-one-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[1]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-two-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[2]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-three-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[3]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-four-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[4]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-five-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[5]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-six-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[6]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-seven-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[7]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-eight-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))||selectedInteraction==Interaction.locations.Fact[8]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-nine-fact\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description))))),selectedInteraction===Interaction.locations.Picture[0]&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-info-window\"},/*#__PURE__*/React.createElement(InfoWindow,{position:{lat:selectedInteraction.coordinates[0]+0.000033,lng:selectedInteraction.coordinates[1]},onCloseClick:function onCloseClick(){setSelectedInteraction(null);}},/*#__PURE__*/React.createElement(\"div\",{className:\"map-button\"},/*#__PURE__*/React.createElement(\"h2\",null,selectedInteraction.type),/*#__PURE__*/React.createElement(Link,{to:\"/section-one-pic\",className:\"basic-btn fact-btn\",onClick:function onClick(){selectedInteraction.complete=true;}},/*#__PURE__*/React.createElement(\"h3\",null,selectedInteraction.description)))))));}var WrappedMap=withScriptjs(withGoogleMap(UnwrappedMap));export default function Map(){return/*#__PURE__*/React.createElement(\"div\",{style:{width:'100%',height:'100%',zIndex:'-2'}},/*#__PURE__*/React.createElement(WrappedMap,{googleMapURL:\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=\".concat(process.env.REACT_APP_GOOGLE_KEY),loadingElement:/*#__PURE__*/React.createElement(\"div\",{style:{height:'100%'}}),containerElement:/*#__PURE__*/React.createElement(\"div\",{style:{height:'100%'}}),mapElement:/*#__PURE__*/React.createElement(\"div\",{style:{height:'100%'}})}));}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useState","Link","usePosition","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","GroundOverlay","Interaction","locations","Quiz","id","coordinates","description","complete","Fact","Game","Picture","UnwrappedMap","selectedInteraction","setSelectedInteraction","watch","enableHighAccuracy","latitude","longitude","lat","lng","fullscreenControl","zoomControl","streetViewControl","mapTypeControl","clickableIcons","google","maps","LatLngBounds","LatLng","MapOverlay","map","interaction","console","log","QuizIncomplete","QuizComplete","FactIncomplete","FactComplete","GameIcon","PicIncomplete","PicComplete","type","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"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","sourcesContent":["// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"FactFormat\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"FactFormat\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\n/* global google */\nimport React, {useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport { usePosition } from 'use-position';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow,\n    GroundOverlay\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIncomplete from './assets/quiz-icon.svg'; import QuizComplete from './assets/quiz-complete.svg';\nimport FactIncomplete from './assets/fact-icon.svg'; import FactComplete from './assets/fact-complete.svg';\nimport PicIncomplete from './assets/picture-incomplete.svg'; import PicComplete from './assets/picture-complete.svg';\n\nimport MapOverlay from './assets/main-building.svg';\n\n// Impromptu JSON data for locations\nexport const Interaction = {\n    locations: {\n        Quiz: [\n            {\n                id: 1,\n                coordinates: [51.523176, -2.578209],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 2,\n                coordinates: [51.523315, -2.578260],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 3,\n                coordinates: [51.523365, -2.578005],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 4,\n                coordinates: [51.523565, -2.578309],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 5,\n                coordinates: [51.523395, -2.578309],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 6,\n                coordinates: [51.523265, -2.578649],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 7,\n                coordinates: [51.523176, -2.578409],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 8,\n                coordinates: [51.523076, -2.578259],\n                description: \"Test Me!\",\n                complete: false,\n            },\n            {\n                id: 9,\n                coordinates: [51.522776, -2.579259],\n                description: \"Test Me!\",\n                complete: false,\n            },\n        ],\n\n        Fact: [\n            {\n                id: 1,\n                coordinates: [51.523226, -2.578289],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 2,\n                coordinates: [51.523265, -2.577975],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 3,\n                coordinates: [51.523405, -2.578095],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 4,\n                coordinates: [51.523485, -2.578159],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 5,\n                coordinates: [51.523425, -2.578509],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 6,\n                coordinates: [51.523315, -2.578549],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 7,\n                coordinates: [51.523116, -2.578329],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 8,\n                coordinates: [51.523066, -2.578419],\n                description: \"Learn!\",\n                complete: false\n            },\n            {\n                id: 9,\n                coordinates: [51.522756, -2.579059],\n                description: \"Learn!\",\n                complete: false\n            },\n        ],\n\n        Game: [\n            {\n                id: 1,\n                coordinates: [51.523213, -2.578062],\n                description: \"Let's Play!\",\n                complete: false\n            }\n        ],\n\n        Picture: [\n            {\n                id: 1,\n                coordinates: [51.523273, -2.578122],\n                description: \"Snap a Photo!\",\n                complete: false\n            }\n        ]\n    },\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    const watch = true;\n    const { latitude, longitude } =\n        usePosition(watch, {enableHighAccuracy: true});\n\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={21}\n            defaultCenter={{lat: 51.523176, lng: -2.578209}}\n            // center={{ lat: latitude, lng: longitude }}\n            options={{\n                fullscreenControl: false,\n                zoomControl: false,\n                streetViewControl: false,\n                mapTypeControl: false,\n                // draggable: false,\n                clickableIcons: false,\n            }}\n        >\n            <GroundOverlay\n                bounds={new google.maps.LatLngBounds(\n                    new google.maps.LatLng(51.522800, -2.578910),\n                    new google.maps.LatLng(51.523655, -2.577485)\n                )}\n                url={MapOverlay}\n                opacity={1}\n            />\n\n            {/* User Location Marker*/}\n            <Marker\n                position={{ lat: latitude, lng: longitude }}\n            />\n\n            {/* Interaction Markers */}\n            {\n                Interaction.locations.Quiz.map ((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                interaction.complete === false ?\n                                    setSelectedInteraction(interaction) :\n                                    console.log(\"N/A\")\n                            }}\n                            icon={\n                                !interaction.complete && (\n                                    QuizIncomplete\n                                ) ||\n                                interaction.complete && (\n                                    QuizComplete\n                                )\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                Interaction.locations.Fact.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                                console.log(selectedInteraction)\n                            }}\n                            icon={\n                                !interaction.complete && (\n                                    FactIncomplete\n                                ) ||\n                                interaction.complete && (\n                                    FactComplete\n                                )\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                Interaction.locations.Game.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                                console.log(selectedInteraction)\n                            }}\n                            icon={GameIcon}\n                        />\n                    </div>\n                ))\n            }\n            {\n                Interaction.locations.Picture.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                                console.log(selectedInteraction)\n                            }}\n                            icon={\n                                !interaction.complete && (PicIncomplete) ||\n                                interaction.complete && (PicComplete)\n                            }\n                        />\n                    </div>\n                ))\n            }\n            {/* End of Interaction Markers */}\n\n            {/* Selecting Interaction Section */}\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations.Quiz[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-one-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction === Interaction.locations.Quiz[1] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-two-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[2] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-three-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[3] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-four-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[4] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-five-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[5] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-six-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[6] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-seven-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[7] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-eight-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Quiz[8] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={ {\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            } }\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-nine-quiz\"\n                                    className=\"basic-btn quiz-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n\n            {\n                selectedInteraction == Interaction.locations.Fact[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-one-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[1] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={ () => {\n                                setSelectedInteraction(null);\n                            } }\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-two-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[2] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-three-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[3] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-four-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[4] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-five-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[5] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-six-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[6] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-seven-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[7] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-eight-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                selectedInteraction == Interaction.locations.Fact[8] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-nine-fact\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n\n            {\n                selectedInteraction === Interaction.locations.Picture[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000033,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link\n                                    to=\"/section-one-pic\"\n                                    className=\"basic-btn fact-btn\"\n                                    onClick={() => {selectedInteraction.complete = true }}\n                                >\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}