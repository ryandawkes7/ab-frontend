{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\nimport React, { Component, useEffect, useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport { usePosition } from 'use-position';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\"; // Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\nconst watch = true;\nconst {\n  latitude,\n  longitude,\n  timestamp,\n  accuracy,\n  error\n} = usePosition(watch, {\n  enableHighAccuracy: true\n});\n\nclass User extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUserLocation: {\n        latitude: 51.523214,\n        longitude: null\n      }\n    };\n  }\n\n} // const getLocation = () => {\n//     if(navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(getCoordinates);\n//         console.log(\"Geolocation: \" + this.state.currentUserLocation.latitude + this.state.currentUserLocation.longitude );\n//     } else {\n//         alert(\"Geolocation not supported by this browser\")\n//     }\n// }\n//\n// const getCoordinates = (position) => {\n//     console.log(position.coords)\n//     this.setState(prevState => ({\n//         currentUserLocation: {\n//             ...prevState.currentUserLocation,\n//             latitude: position.coords.latitude,\n//             longitude: position.coords.longitude\n//         }\n//     }))\n// }\n\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  const [latValue, setLatValue] = useState(0);\n  const [lonValue, setLonValue] = useState(0);\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLonValue({\n          lonValue: position.coords.longitude\n        });\n        console.log(\"Lat: \", {\n          latitude\n        }, \", Lon:\", {\n          longitude\n        });\n        setLatValue(prevState => ({\n          currentUserLat: {\n            latValue: position.coords.latitude\n          }\n        }));\n      });\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 20,\n      defaultCenter: {\n        lat: latitude,\n        lng: -2.578499\n      },\n      center: {\n        lat: latValue,\n        lng: lonValue\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: 51.523160,\n        lng: -2.578499\n      },\n      onClick: getLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }), Interaction.locations.map(interactions => /*#__PURE__*/React.createElement(Marker, {\n      key: interactions.id,\n      position: {\n        lat: interactions.coordinates[0],\n        lng: interactions.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interactions);\n      },\n      icon: interactions.type === \"Quiz\" && QuizIcon || interactions.type === \"Fact\" && FactIcon || interactions.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    })), // Function for if the button pressed is a QUIZ button\n    selectedInteraction === Interaction.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"map-basic-btn map-quiz-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a FACT button\n    selectedInteraction === Interaction.locations[1] && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a GAME button\n    selectedInteraction === Interaction.locations[2] && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/game\",\n      className: \"basic-btn game-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","Component","useEffect","useState","Link","usePosition","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Interaction","locations","watch","latitude","longitude","timestamp","accuracy","error","enableHighAccuracy","User","constructor","props","state","currentUserLocation","UnwrappedMap","selectedInteraction","setSelectedInteraction","latValue","setLatValue","lonValue","setLonValue","getLocation","navigator","geolocation","getCurrentPosition","position","coords","console","log","prevState","currentUserLat","lat","lng","map","interactions","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport { usePosition } from 'use-position';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nconst watch = true;\nconst { latitude, longitude, timestamp, accuracy, error } = usePosition(watch, {enableHighAccuracy: true});\n\nclass User extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            currentUserLocation: {\n                latitude: 51.523214,\n                longitude: null\n            }\n        }\n    }\n}\n\n// const getLocation = () => {\n//     if(navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(getCoordinates);\n//         console.log(\"Geolocation: \" + this.state.currentUserLocation.latitude + this.state.currentUserLocation.longitude );\n//     } else {\n//         alert(\"Geolocation not supported by this browser\")\n//     }\n// }\n//\n// const getCoordinates = (position) => {\n//     console.log(position.coords)\n//     this.setState(prevState => ({\n//         currentUserLocation: {\n//             ...prevState.currentUserLocation,\n//             latitude: position.coords.latitude,\n//             longitude: position.coords.longitude\n//         }\n//     }))\n// }\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n    const [latValue, setLatValue] = useState(0);\n    const [lonValue, setLonValue] = useState(0);\n\n    const getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                setLonValue({lonValue: position.coords.longitude})\n                console.log(\"Lat: \", {latitude}, \", Lon:\", {longitude})\n\n                setLatValue(prevState => ({\n                    currentUserLat: {\n                        latValue: position.coords.latitude\n                    }\n                }))\n            })\n        }\n    }\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={20}\n            defaultCenter={{lat: latitude, lng: -2.578499}}\n            center={{ lat: latValue, lng: lonValue }}\n        >\n            <Marker\n                position={{ lat: 51.523160, lng: -2.578499 }}\n                onClick={getLocation}\n            />\n            {/* Maps JSON date to Function */}\n            {Interaction.locations.map((interactions) => (\n                <Marker\n                    key={interactions.id}\n                    position={{\n                        lat: interactions.coordinates[0],\n                        lng: interactions.coordinates[1]\n                    }}\n                    onClick={() => {\n                        setSelectedInteraction(interactions);\n                    }}\n                    icon={\n                        interactions.type === \"Quiz\" && (\n                            QuizIcon\n                        ) ||\n                        interactions.type === \"Fact\" && (\n                            FactIcon\n                        ) ||\n                            interactions.type === \"Game\" && (\n                                GameIcon\n                        )\n                    }\n                />\n            ))}\n\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{selectedInteraction.description}</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a FACT button\n                selectedInteraction === Interaction.locations[1] && (\n                    <div>\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                            className=\"map-info-window\"\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a GAME button\n                selectedInteraction === Interaction.locations[2] && (\n                    <div>\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                            className=\"map-info-window\"\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/game\" className=\"basic-btn game-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}