{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\"; // Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nconst getLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(getCoordinates);\n    console.log(\"Geolocation: \" + this.state.currentUserLocation.latitude + this.state.currentUserLocation.longitude);\n  } else {\n    alert(\"Geolocation not supported by this browser\");\n  }\n};\n\nconst getCoordinates = position => {\n  console.log(position.coords);\n  this.setState(prevState => ({\n    currentUserLocation: { ...prevState.currentUserLocation,\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }\n  }));\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  const [latitudeValue, setLatitudeValue] = useState(null);\n  const [longitudeValue, setLongitudeValue] = useState(null);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position.coords);\n        setLatitudeValue({\n          latitudeValue: position.coords.latitude\n        });\n      });\n    }\n  });\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 20,\n      defaultCenter: {\n        lat: 51.523214,\n        lng: -2.578499\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: 51.523214,\n        lng: -2.578499\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }), Interaction.locations.map(interactions => /*#__PURE__*/React.createElement(Marker, {\n      key: interactions.id,\n      position: {\n        lat: interactions.coordinates[0],\n        lng: interactions.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interactions);\n      },\n      icon: interactions.type === \"Quiz\" && QuizIcon || interactions.type === \"Fact\" && FactIcon || interactions.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    })), // Function for if the button pressed is a QUIZ button\n    selectedInteraction === Interaction.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"map-basic-btn map-quiz-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a FACT button\n    selectedInteraction === Interaction.locations[1] && /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }, selectedInteraction.description)))) || // Function for if the button pressed is a GAME button\n    selectedInteraction === Interaction.locations[2] && /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 29\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/game\",\n      className: \"basic-btn game-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }, selectedInteraction.description)))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useEffect","useState","Link","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Interaction","locations","getLocation","navigator","geolocation","getCurrentPosition","getCoordinates","console","log","state","currentUserLocation","latitude","longitude","alert","position","coords","setState","prevState","UnwrappedMap","selectedInteraction","setSelectedInteraction","latitudeValue","setLatitudeValue","longitudeValue","setLongitudeValue","lat","lng","map","interactions","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SACIC,SADJ,EAEIC,YAFJ,EAGIC,aAHJ,EAIIC,MAJJ,EAKIC,UALJ,QAMO,mBANP;;;+CAYA;;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,SAAS,EAAE,CACP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GADO,EAOP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GAPO,EAaP;AACI,UAAM,CADV;AAEI,YAAQ,MAFZ;AAGI,mBAAe,CAAC,SAAD,EAAY,CAAC,QAAb,CAHnB;AAII,mBAAe;AAJnB,GAbO;AADK,CAApB;;AAuBI,MAAMC,WAAW,GAAG,MAAM;AACtB,MAAGC,SAAS,CAACC,WAAb,EAA0B;AACtBD,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,cAAzC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,KAAKC,KAAL,CAAWC,mBAAX,CAA+BC,QAAjD,GAA4D,KAAKF,KAAL,CAAWC,mBAAX,CAA+BE,SAAvG;AACH,GAHD,MAGO;AACHC,IAAAA,KAAK,CAAC,2CAAD,CAAL;AACH;AACJ,CAPD;;AASA,MAAMP,cAAc,GAAIQ,QAAD,IAAc;AACjCP,EAAAA,OAAO,CAACC,GAAR,CAAYM,QAAQ,CAACC,MAArB;AACA,OAAKC,QAAL,CAAcC,SAAS,KAAK;AACxBP,IAAAA,mBAAmB,EAAE,EACjB,GAAGO,SAAS,CAACP,mBADI;AAEjBC,MAAAA,QAAQ,EAAEG,QAAQ,CAACC,MAAT,CAAgBJ,QAFT;AAGjBC,MAAAA,SAAS,EAAEE,QAAQ,CAACC,MAAT,CAAgBH;AAHV;AADG,GAAL,CAAvB;AAOH,CATD;;AAWJ,SAASM,YAAT,GAAwB;AAEpB,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgD3B,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAAC4B,aAAD,EAAgBC,gBAAhB,IAAoC7B,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAC8B,cAAD,EAAiBC,iBAAjB,IAAsC/B,QAAQ,CAAC,IAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGW,SAAS,CAACC,WAAb,EAA0B;AACtBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCS,QAAQ,IAAI;AACjDP,QAAAA,OAAO,CAACC,GAAR,CAAYM,QAAQ,CAACC,MAArB;AACAO,QAAAA,gBAAgB,CAAC;AACbD,UAAAA,aAAa,EAAEP,QAAQ,CAACC,MAAT,CAAgBJ;AADlB,SAAD,CAAhB;AAGH,OALD;AAMH;AACJ,GATQ,CAAT;AAWA;AAAA;AACI;AACA,wBAAC,SAAD;AACI,MAAA,WAAW,EAAE,EADjB;AAEI,MAAA,aAAa,EAAE;AAACc,QAAAA,GAAG,EAAE,SAAN;AAAiBC,QAAAA,GAAG,EAAE,CAAC;AAAvB,OAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,MAAD;AACI,MAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAE,SAAP;AAAkBC,QAAAA,GAAG,EAAE,CAAC;AAAxB,OADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAQK1B,WAAW,CAACC,SAAZ,CAAsB0B,GAAtB,CAA2BC,YAAD,iBACvB,oBAAC,MAAD;AACI,MAAA,GAAG,EAAEA,YAAY,CAACC,EADtB;AAEI,MAAA,QAAQ,EAAE;AACNJ,QAAAA,GAAG,EAAEG,YAAY,CAACE,WAAb,CAAyB,CAAzB,CADC;AAENJ,QAAAA,GAAG,EAAEE,YAAY,CAACE,WAAb,CAAyB,CAAzB;AAFC,OAFd;AAMI,MAAA,OAAO,EAAE,MAAM;AACXV,QAAAA,sBAAsB,CAACQ,YAAD,CAAtB;AACH,OARL;AASI,MAAA,IAAI,EACAA,YAAY,CAACG,IAAb,KAAsB,MAAtB,IACIC,QADJ,IAGAJ,YAAY,CAACG,IAAb,KAAsB,MAAtB,IACIE,QAJJ,IAMIL,YAAY,CAACG,IAAb,KAAsB,MAAtB,IACIG,QAjBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CARL,EAiCQ;AACAf,IAAAA,mBAAmB,KAAKnB,WAAW,CAACC,SAAZ,CAAsB,CAAtB,CAAxB,iBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE;AACNwB,QAAAA,GAAG,EAAEN,mBAAmB,CAACW,WAApB,CAAgC,CAAhC,IAAqC,QADpC;AAENJ,QAAAA,GAAG,EAAEP,mBAAmB,CAACW,WAApB,CAAgC,CAAhC;AAFC,OADd;AAKI,MAAA,YAAY,EAAE,MAAM;AAChBV,QAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH,OAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMD,mBAAmB,CAACY,IAA1B,CADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,OAAT;AAAiB,MAAA,SAAS,EAAC,4BAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKZ,mBAAmB,CAACgB,WAAzB,CADJ,CAFJ,CATJ,CADJ,CADJ,IAqBA;AACAhB,IAAAA,mBAAmB,KAAKnB,WAAW,CAACC,SAAZ,CAAsB,CAAtB,CAAxB,iBACI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE;AACNwB,QAAAA,GAAG,EAAEN,mBAAmB,CAACW,WAApB,CAAgC,CAAhC,IAAqC,QADpC;AAENJ,QAAAA,GAAG,EAAEP,mBAAmB,CAACW,WAApB,CAAgC,CAAhC;AAFC,OADd;AAKI,MAAA,YAAY,EAAE,MAAM;AAChBV,QAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH,OAPL;AAQI,MAAA,SAAS,EAAC,iBARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMD,mBAAmB,CAACY,IAA1B,CADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,OAAT;AAAiB,MAAA,SAAS,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMZ,mBAAmB,CAACgB,WAA1B,CADJ,CAFJ,CAVJ,CAvBJ,IA0CA;AACAhB,IAAAA,mBAAmB,KAAKnB,WAAW,CAACC,SAAZ,CAAsB,CAAtB,CAAxB,iBACI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE;AACNwB,QAAAA,GAAG,EAAEN,mBAAmB,CAACW,WAApB,CAAgC,CAAhC,IAAqC,QADpC;AAENJ,QAAAA,GAAG,EAAEP,mBAAmB,CAACW,WAApB,CAAgC,CAAhC;AAFC,OADd;AAKI,MAAA,YAAY,EAAE,MAAM;AAChBV,QAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACH,OAPL;AAQI,MAAA,SAAS,EAAC,iBARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMD,mBAAmB,CAACY,IAA1B,CADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,OAAT;AAAiB,MAAA,SAAS,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMZ,mBAAmB,CAACgB,WAA1B,CADJ,CAFJ,CAVJ,CA9EZ;AAFJ;AAsGH;;AAED,MAAMC,UAAU,GAAGxC,YAAY,CAACC,aAAa,CAACqB,YAAD,CAAd,CAA/B;AAEA,eAAe,SAASmB,GAAT,GAAe;AAC1B,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,MAAxB;AAAgCC,MAAAA,MAAM,EAAE;AAAxC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AACI,IAAA,YAAY,EAAG,yFAAwFC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,EAD5I;AAEI,IAAA,cAAc,eAAG;AAAK,MAAA,KAAK,EAAE;AAACJ,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGI,IAAA,gBAAgB,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHvB;AAII,IAAA,UAAU,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAUH","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\n    const getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(getCoordinates);\n            console.log(\"Geolocation: \" + this.state.currentUserLocation.latitude + this.state.currentUserLocation.longitude );\n        } else {\n            alert(\"Geolocation not supported by this browser\")\n        }\n    }\n\n    const getCoordinates = (position) => {\n        console.log(position.coords)\n        this.setState(prevState => ({\n            currentUserLocation: {\n                ...prevState.currentUserLocation,\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n            }\n        }))\n    }\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n    const [latitudeValue, setLatitudeValue] = useState(null);\n    const [longitudeValue, setLongitudeValue] = useState(null);\n\n    useEffect(() => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                console.log(position.coords)\n                setLatitudeValue({\n                    latitudeValue: position.coords.latitude\n                })\n            })\n        }\n    })\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={20}\n            defaultCenter={{lat: 51.523214, lng: -2.578499}}\n        >\n            <Marker\n                position={{ lat: 51.523214, lng: -2.578499 }}\n            />\n            {/* Maps JSON date to Function */}\n            {Interaction.locations.map((interactions) => (\n                <Marker\n                    key={interactions.id}\n                    position={{\n                        lat: interactions.coordinates[0],\n                        lng: interactions.coordinates[1]\n                    }}\n                    onClick={() => {\n                        setSelectedInteraction(interactions);\n                    }}\n                    icon={\n                        interactions.type === \"Quiz\" && (\n                            QuizIcon\n                        ) ||\n                        interactions.type === \"Fact\" && (\n                            FactIcon\n                        ) ||\n                            interactions.type === \"Game\" && (\n                                GameIcon\n                        )\n                    }\n                />\n            ))}\n\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{selectedInteraction.description}</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a FACT button\n                selectedInteraction === Interaction.locations[1] && (\n                    <InfoWindow\n                        position={{\n                            lat: selectedInteraction.coordinates[0] + 0.000065,\n                            lng: selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                            setSelectedInteraction(null);\n                        }}\n                        className=\"map-info-window\"\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ selectedInteraction.type }</h2>\n                            <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n                                <h3>{ selectedInteraction.description }</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                ) ||\n\n                // Function for if the button pressed is a GAME button\n                selectedInteraction === Interaction.locations[2] && (\n                    <InfoWindow\n                        position={{\n                            lat: selectedInteraction.coordinates[0] + 0.000065,\n                            lng: selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                            setSelectedInteraction(null);\n                        }}\n                        className=\"map-info-window\"\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ selectedInteraction.type }</h2>\n                            <Link to=\"/game\" className=\"basic-btn game-btn\">\n                                <h3>{ selectedInteraction.description }</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                )\n\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}