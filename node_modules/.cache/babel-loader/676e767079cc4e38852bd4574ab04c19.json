{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\nimport React, { useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport { usePosition } from 'use-position';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\"; // Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  const watch = true;\n  const {\n    latitude,\n    longitude\n  } = usePosition(watch, {\n    enableHighAccuracy: true\n  });\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 20,\n      defaultCenter: {\n        lat: latitude,\n        lng: longitude\n      },\n      center: {\n        lat: latitude,\n        lng: longitude\n      },\n      options: {\n        fullscreenControl: false,\n        zoomControl: false,\n        streetViewControl: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: latitude,\n        lng: longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), Interaction.locations.map(interactions => /*#__PURE__*/React.createElement(Marker, {\n      key: interactions.id,\n      position: {\n        lat: interactions.coordinates[0],\n        lng: interactions.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interactions);\n      },\n      icon: interactions.type === \"Quiz\" && QuizIcon || interactions.type === \"Fact\" && FactIcon || interactions.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    })), // Function for if the button pressed is a QUIZ button\n    selectedInteraction === Interaction.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"map-basic-btn map-quiz-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a FACT button\n    selectedInteraction === Interaction.locations[1] && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a GAME button\n    selectedInteraction === Interaction.locations[2] && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/game\",\n      className: \"basic-btn game-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useState","Link","usePosition","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Interaction","locations","UnwrappedMap","selectedInteraction","setSelectedInteraction","watch","latitude","longitude","enableHighAccuracy","lat","lng","fullscreenControl","zoomControl","streetViewControl","map","interactions","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport { usePosition } from 'use-position';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    const watch = true;\n    const { latitude, longitude } =\n        usePosition(watch, {enableHighAccuracy: true});\n\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={20}\n            defaultCenter={{lat: latitude, lng: longitude}}\n            center={{ lat: latitude, lng: longitude }}\n            options={ {fullscreenControl: false, zoomControl: false, streetViewControl: false}}\n        >\n            {/* User Location Marker*/}\n            <Marker\n                position={{ lat: latitude, lng: longitude }}\n            />\n            {/* Maps JSON date to Function */}\n            {Interaction.locations.map((interactions) => (\n                <Marker\n                    key={interactions.id}\n                    position={{\n                        lat: interactions.coordinates[0],\n                        lng: interactions.coordinates[1]\n                    }}\n                    onClick={() => {\n                        setSelectedInteraction(interactions);\n                    }}\n                    icon={\n                        interactions.type === \"Quiz\" && (\n                            QuizIcon\n                        ) ||\n                        interactions.type === \"Fact\" && (\n                            FactIcon\n                        ) ||\n                            interactions.type === \"Game\" && (\n                                GameIcon\n                        )\n                    }\n                />\n            ))}\n\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{selectedInteraction.description}</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a FACT button\n                selectedInteraction === Interaction.locations[1] && (\n                    <div>\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                            className=\"map-info-window\"\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a GAME button\n                selectedInteraction === Interaction.locations[2] && (\n                    <div>\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                            className=\"map-info-window\"\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/game\" className=\"basic-btn game-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}