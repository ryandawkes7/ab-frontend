{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport Icon from \"../map/assets/quiz-icon.svg\";\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n}; // Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getGeoLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.getGeoLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        });\n      } else {\n        error => console.log(error);\n      }\n    };\n\n    this.state = {\n      latitude: null,\n      longitude: null\n    };\n    this.getLocation = this.getLocation.bind(this);\n    this.getCoordinates = this.getCoordinates.bind(this);\n  }\n\n  componentWillUpdate() {\n    this.getGeoLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker;\n  }\n\n  getCoordinates(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    });\n  } //Error Handling\n\n\n  handleLocationError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        alert(\"Denied request for Geolocation\");\n        break;\n\n      case error.POSITION_UNAVAILABLE:\n        alert(\"Location info is unavailable\");\n        break;\n\n      case error.TIMEOUT:\n        alert(\"Location request has timed out\");\n        break;\n\n      case error.UNKNOWN_ERR:\n        alert(\"An unknown error occurred\");\n        break;\n\n      default:\n        alert(\"An unknown error occurred\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, \"Location\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"Lon: \", this.state.longitude, \", Lat: \", this.state.latitude), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      icon: Icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC-AmFN95fVGvNGJrQULEoHAX-1BYkk7xg'\n})(MapTest);","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","Map","GoogleApiWrapper","Marker","mapStyles","width","height","Interaction","locations","MapTest","constructor","props","delayedShowMarker","setTimeout","getGeoLocation","setState","isMarkerShown","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","error","console","log","state","getLocation","bind","getCoordinates","componentWillUpdate","componentDidMount","handleLocationError","code","PERMISSION_DENIED","alert","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERR","render","google","lat","lng","Icon","apiKey"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Map, GoogleApiWrapper, Marker } from \"google-maps-react\";\nimport Icon from '../map/assets/quiz-icon.svg';\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%',\n};\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nclass MapTest extends Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            latitude: null,\n            longitude: null,\n        };\n        this.getLocation = this.getLocation.bind(this);\n        this.getCoordinates = this.getCoordinates.bind(this);\n    }\n\n    componentWillUpdate () {\n        this.getGeoLocation()\n    }\n\n    componentDidMount () {\n        this.delayedShowMarker\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getGeoLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    // getLocation() {\n    //     if(navigator.geolocation) {\n    //         navigator.geolocation.watchPosition(this.getCoordinates, this.handleLocationError);\n    //\n    //         navigator.geolocation.getCurrentPosition(function (position) {\n    //             console.log(position)\n    //         })\n    //\n    //     } else {\n    //         alert(\"Geolocation not supported by this browser\");\n    //     }\n    // }\n\n    getGeoLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                this.setState({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                })\n            })\n        } else {\n            error => console.log(error)\n        }\n    }\n\n    getCoordinates(position) {\n        this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        })\n    }\n\n    //Error Handling\n    handleLocationError(error) {\n        switch(error.code){\n            case error.PERMISSION_DENIED:\n                alert(\"Denied request for Geolocation\")\n                break;\n            case error.POSITION_UNAVAILABLE:\n                alert(\"Location info is unavailable\")\n                break;\n            case error.TIMEOUT:\n                alert(\"Location request has timed out\")\n                break;\n            case error.UNKNOWN_ERR:\n                alert(\"An unknown error occurred\")\n                break;\n            default:\n                alert(\"An unknown error occurred\")\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <button onClick={this.getLocation}>Location</button>\n                <h2>Lon: { this.state.longitude }, Lat: {this.state.latitude}</h2>\n                <Map\n                    google={this.props.google}\n                    zoom={14}\n                    style={mapStyles}\n                    initialCenter={{\n                        lat: this.state.latitude,\n                        lng: this.state.longitude\n                    }}\n                />\n                <Marker\n                    position={{\n                        lat: this.state.latitude,\n                        lng: this.state.longitude\n                    }}\n                    icon={Icon}\n                />\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyC-AmFN95fVGvNGJrQULEoHAX-1BYkk7xg'\n})(MapTest);\n"]},"metadata":{},"sourceType":"module"}