{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\nimport React, { Component, useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport { compose, withProps } from \"recompose\";\nimport { Link } from \"react-router-dom\";\nconst UnwrappedMap = compose(withProps({\n  googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 25\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100vh`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 27\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  })\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/React.createElement(GoogleMap, {\n  defaultZoom: 25,\n  defaultCenter: {\n    lat: 51.523214,\n    lng: -2.578499\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }\n}, props.isMarkerShown && /*#__PURE__*/React.createElement(Marker, {\n  position: {\n    lat: props.currentLocation.lat,\n    lng: props.currentLocation.lng\n  },\n  onClick: props.onMarkerClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}), MapInteractions.locations.map(clickableInteractions => /*#__PURE__*/React.createElement(Marker, {\n  key: clickableInteractions.id,\n  position: {\n    lat: clickableInteractions.coordinates[0],\n    lng: clickableInteractions.coordinates[1]\n  },\n  onClick: () => {\n    props.setSelectedInteraction(clickableInteractions);\n  },\n  icon: clickableInteractions.type === \"Quiz\" && QuizIcon || clickableInteractions.type === \"Fact\" && FactIcon || clickableInteractions.type === \"Game\" && GameIcon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }\n})), props.selectedInteraction === MapInteractions.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n  className: \"map-info-window\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(InfoWindow, {\n  position: {\n    lat: props.selectedInteraction.coordinates[0] + 0.000065,\n    lng: props.selectedInteraction.coordinates[1]\n  },\n  onCloseClick: () => {\n    props.setSelectedInteraction(null);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 21\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"map-button\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 25\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 29\n  }\n}, props.selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n  to: \"/quiz\",\n  className: \"map-basic-btn map-quiz-btn\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 29\n  }\n}, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 33\n  }\n}, props.selectedInteraction.description)))))));\nconst MapInteractions = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getGeoLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.handleMarkerClick = () => {\n      this.setState({\n        isMarkerShown: false\n      });\n      this.delayedShowMarker();\n    };\n\n    this.getGeoLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLatLng: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLatLng: {\n        lat: 0,\n        lng: 0\n      },\n      isMarkerShown: false,\n      selectedInteraction: null,\n      setSelectedInteraction: null\n    };\n  }\n\n  componentWillUpdate() {\n    this.getGeoLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UnwrappedMap, {\n      isMarkerShown: this.state.isMarkerShown,\n      onMarkerClick: this.handleMarkerClick,\n      currentLocation: this.state.currentLatLng,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default MapTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","useState","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","compose","withProps","Link","UnwrappedMap","googleMapURL","process","env","REACT_APP_GOOGLE_KEY","loadingElement","height","containerElement","mapElement","props","lat","lng","isMarkerShown","currentLocation","onMarkerClick","MapInteractions","locations","map","clickableInteractions","id","coordinates","setSelectedInteraction","type","QuizIcon","FactIcon","GameIcon","selectedInteraction","description","MapTest","constructor","delayedShowMarker","setTimeout","getGeoLocation","setState","handleMarkerClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","prevState","currentLatLng","latitude","longitude","state","componentWillUpdate","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport {compose, withProps} from \"recompose\";\nimport {Link} from \"react-router-dom\";\n\nconst UnwrappedMap = compose(\n    withProps({\n        googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n        loadingElement: <div style={{ height: `100%` }} />,\n        containerElement: <div style={{ height: `100vh` }} />,\n        mapElement: <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap\n)((props) =>\n    <GoogleMap\n        defaultZoom={25}\n        defaultCenter={{lat: 51.523214, lng: -2.578499}}\n    >\n        {props.isMarkerShown &&\n        <Marker\n            position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n            onClick={props.onMarkerClick}\n        />\n        }\n        {MapInteractions.locations.map(clickableInteractions => (\n            <Marker\n                key={clickableInteractions.id}\n                position={{\n                    lat: clickableInteractions.coordinates[0],\n                    lng: clickableInteractions.coordinates[1]\n                }}\n                onClick={() => {\n                    props.setSelectedInteraction(clickableInteractions);\n                }}\n                icon={\n                    clickableInteractions.type === \"Quiz\" && (QuizIcon)\n                    ||\n                    clickableInteractions.type === \"Fact\" && (FactIcon)\n                    ||\n                    clickableInteractions.type === \"Game\" && (GameIcon)\n                }\n            />\n        ))}\n        {\n            props.selectedInteraction === MapInteractions.locations[0] && (\n                <div className=\"map-info-window\">\n                    <InfoWindow\n                        position={{\n                            lat: props.selectedInteraction.coordinates[0] + 0.000065,\n                            lng: props.selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                            props.setSelectedInteraction(null);\n                        }}\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ props.selectedInteraction.type }</h2>\n                            <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                <h3>{props.selectedInteraction.description}</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                </div>\n            )\n        }\n\n    </GoogleMap>\n)\n\nconst MapInteractions = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nclass MapTest extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentLatLng: {\n                lat: 0,\n                lng: 0\n            },\n            isMarkerShown: false,\n            selectedInteraction: null,\n            setSelectedInteraction: null\n        }\n    }\n\n    componentWillUpdate(){\n        this.getGeoLocation()\n    }\n\n    componentDidMount() {\n        this.delayedShowMarker()\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getGeoLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    handleMarkerClick = () => {\n        this.setState({ isMarkerShown: false })\n        this.delayedShowMarker()\n    }\n\n    getGeoLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLatLng: {\n                            ...prevState.currentLatLng,\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n\n    render() {\n        return (\n            <UnwrappedMap\n                isMarkerShown={this.state.isMarkerShown}\n                onMarkerClick={this.handleMarkerClick}\n                currentLocation={this.state.currentLatLng}\n            />\n        )\n    }\n}\n\nexport default MapTest;\n"]},"metadata":{},"sourceType":"module"}