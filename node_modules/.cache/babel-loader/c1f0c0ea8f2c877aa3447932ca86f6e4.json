{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Documents/React Projects/aero-client/Aerospace-Project/aerospace-client/src/components/quiz/quiz.js\";\n// import React, {Component} from 'react';\n// import { Link } from 'react-router-dom';\n// import Back from \"../backButton/back\";\n// import './quiz.css'\n//\n// const quizData = [\n//     {\n//         key: \"1\",\n//         question: \"What is the museum called?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"2\",\n//         question: \"What are the foxes called?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n//     {\n//         key: \"3\",\n//         question: \"What is the museum called 2?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"4\",\n//         question: \"What are the foxes called 2?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n// ]\n//\n// class Popup extends Component {\n//     render(){\n//         return(\n//             <div className=\"popup\">\n//                 <div className=\"popup-inner\">\n//                     <h1>{this.props.text}</h1>\n//                     <button onClick={this.props.closePopup}>Close</button>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// class ResultsEnd extends Component {\n//     render() {\n//         const score = this.props.correctCount * 50;\n//         var menuLink = <Link to='/game-menu'>Back to Menu</Link>\n//\n//         return (\n//             <div className=\"score\">\n//                 <h3>You Gained {score} points!</h3>\n//                 <hr/>\n//                 <h3>{menuLink}</h3>\n//             </div>\n//         )\n//     }\n// }\n//\n// class Quiz extends Component {\n//     // Sets props and state to set values\n//     constructor (props) {\n//         super(props);\n//         this.state = {\n//             question: quizData[0].question,\n//             qsNo: 0,\n//             options: quizData[0].options,\n//             correctAnswer: \"Bristol Aerospace Museum\",\n//             correctCount: 0,\n//             incorrectCount: 0,\n//             flashMsg: \"\",\n//             score: 0,\n//             showPopup: false\n//         }\n//\n//         this.handleNavigation = this.handleNavigation.bind(this);\n//         this.handleAnswerClick = this.handleAnswerClick.bind(this);\n//\n//     }\n//\n//     // Function for when the user presses next/previous button\n//     handleNavigation(event){\n//\n//         // Event for when the user presses the next button\n//         // If the event is set to 'next' and there are still questions left...\n//         if(event === \"next\" && (this.state.qsNo < quizData.length - 1)) {\n//             console.log(this.state.qsNo + 1);\n//             // Add one to the Question No. value and pass data for the next question\n//             this.setState({ qsNo:(this.state.qsNo + 1) }, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options,\n//                     correctAnswer: quizData[this.state.qsNo].correct\n//                 })\n//             });\n//         // Otherwise, if the event is 'next' but there are no questions left in the data...\n//         } else if(event === \"next\" && (this.state.qsNo >= quizData.length - 1)) {\n//             // Set score counter to the user's overall score\n//             this.setState({\n//                 score: (this.state.correctCount * 50)\n//             })\n//             console.log(\"Game Over! Your score is \" + this.state.correctCount * 50)\n//         }\n//\n//         // Event for when the user presses the previous button\n//         // Unused, but goes back a question if the user clicks the previous button\n//\n//         if(event === \"previous\" && (this.state.qsNo >= 1)) {\n//             console.log(\"prvs\");\n//             this.setState({ qsNo:(this.state.qsNo - 1)}, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options\n//                 })\n//             });\n//         }\n//     }\n//\n//     // Function for when the user presses one of the answer buttons\n//     handleAnswerClick(option) {\n//         // Causes the next question to pop up\n//         // this.handleNavigation(\"next\");\n//         console.log(option); // Logs the answer that the user selects\n//\n//         // If the user selects the correct answer...\n//         if(this.state.correctAnswer === option){\n//             console.log(\"Correct\");\n//             // Add one to their correct answers count\n//             this.setState({correctCount: this.state.correctCount + 1})\n//         } else {\n//             // If not, then add one point to the incorrect score count\n//             this.setState({incorrectCount: this.state.incorrectCount + 1})\n//         }\n//     }\n//\n//     render () {\n//         return (\n//             <div className=\"quiz-container\">\n//                 <Back />\n//\n//                 {this.state.qsNo >= quizData.length - 1 &&\n//                     <ResultsEnd score={this.state.correctCount} />\n//                 }\n//                 { this.state.qsNo < quizData.length - 1 &&\n//\n//                     <Question questionData={ this.state.question }/> &&\n//\n//                     <Answers\n//                     options={ this.state.options }\n//                     onAnswerClick={ this.handleAnswerClick }\n//                     onClickFromParent={ this.handleNavigation }\n//                     /> &&\n//                     <Results\n//                     correctCount={ this.state.correctCount }\n//                     incorrectCount={ this.state.incorrectCount }\n//                     /> &&\n//                     <Navigation onClickFromParent={ this.handleNavigation }/>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// // Question tag (uses props)\n// const Question = (props) => {\n//     return(\n//         <div>\n//             <div className=\"question-component\">\n//                 <h3>{props.questionData}</h3>\n//             </div>\n//         </div>\n//     )\n// }\n//\n// // Answer tag\n// const Answers = (props) => {\n//     // Creates 'passOption' prop with event equal to the value of the answers from the data (via props)\n//     function passOption(e) {\n//         props.onAnswerClick(e);\n//\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//\n//     // Returns answers as text in the buttons. The 'onClick' contains a function that stores the data of the answer.\n//     // This is then run in the props where the answer is set to the answer clicked, being determined whether its\n//     // correct or incorrect.\n//     return(\n//         <div className=\"answer-container\" aria-disabled>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer1) }}\n//             >\n//                 {props.options.answer1}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer2) }}>{props.options.answer2}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer3) }}>{props.options.answer3}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer4) }}>{props.options.answer4}\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Navigation tag\n// const Navigation = (props) => {\n//     // Creates next button variable that calls the \"next\" event from 'handleNavigation'\n//     const clickNext = () => {\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//     const clickPrevious = () => {\n//         return(props.onClickFromParent(\"previous\"));\n//     }\n//\n//     return(\n//         <div>\n//             <button\n//                 className=\"p-info-next\"\n//                 onClick={clickNext}\n//             >\n//                 Next\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Score counter tag\n// const Results = (props) => {\n//         return(\n//             <div>\n//                 <h4>Score: {props.correctCount * 50}</h4>\n//                 Correct: {props.correctCount} | Incorrect: {props.incorrectCount}\n//             </div>\n//         )\n// }\n//\n// export default Quiz;\nimport React, { Component } from 'react';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    e.preventDefault(); //Prevents full refresh\n\n    this.props.onChoiceChange(e.target.value);\n  }\n\n  render() {\n    const question = this.props.question;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }\n    }, \"Question\");\n  }\n\n}\n\nclass Results extends Component {\n  render() {}\n\n}\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      current: 1\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/ryandawkes/Documents/React Projects/aero-client/Aerospace-Project/aerospace-client/src/components/quiz/quiz.js"],"names":["React","Component","Question","constructor","props","handleChange","bind","e","preventDefault","onChoiceChange","target","value","render","question","Results","Quiz","state","score","current"],"mappingseC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC7BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,YAAY,CAACE,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,cAAF,GADY,CACQ;;AACpB,SAAKJ,KAAL,CAAWK,cAAX,CAA0BF,CAAC,CAACG,MAAF,CAASC,KAAnC;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,UAAMC,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAA5B;AAEA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH;;AAnB4B;;AAsBjC,MAAMC,OAAN,SAAsBb,SAAtB,CAAgC;AAC5BW,EAAAA,MAAM,GAAE,CACP;;AAF2B;;AAKhC,MAAMG,IAAN,SAAmBd,SAAnB,CAA6B;AACzBE,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AAEA,SAAKY,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAKA,SAAKb,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AACDM,EAAAA,MAAM,GAAI;AACN,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAKH;;AAjBwB;;AAoB7B,eAAeG,IAAf","sourcesContent":["// import React, {Component} from 'react';\n// import { Link } from 'react-router-dom';\n// import Back from \"../backButton/back\";\n// import './quiz.css'\n//\n// const quizData = [\n//     {\n//         key: \"1\",\n//         question: \"What is the museum called?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"2\",\n//         question: \"What are the foxes called?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n//     {\n//         key: \"3\",\n//         question: \"What is the museum called 2?\",\n//         options: {\n//             answer1: \"Bristol Museum\",\n//             answer2: \"Museum of Flying\",\n//             answer3: \"Bristol Aerospace Museum\",\n//             answer4: \"Bristolian Flying House\"\n//         },\n//         correct: \"Bristol Aerospace Museum\"\n//     },\n//     {\n//         key: \"4\",\n//         question: \"What are the foxes called 2?\",\n//         options: {\n//             answer1: \"Archie and Amy\",\n//             answer2: \"Alfie and Amelia\",\n//             answer3: \"Alex and Emily\",\n//             answer4: \"Alan and Aimee\"\n//         },\n//         correct: \"Alfie and Amelia\"\n//     },\n// ]\n//\n// class Popup extends Component {\n//     render(){\n//         return(\n//             <div className=\"popup\">\n//                 <div className=\"popup-inner\">\n//                     <h1>{this.props.text}</h1>\n//                     <button onClick={this.props.closePopup}>Close</button>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// class ResultsEnd extends Component {\n//     render() {\n//         const score = this.props.correctCount * 50;\n//         var menuLink = <Link to='/game-menu'>Back to Menu</Link>\n//\n//         return (\n//             <div className=\"score\">\n//                 <h3>You Gained {score} points!</h3>\n//                 <hr/>\n//                 <h3>{menuLink}</h3>\n//             </div>\n//         )\n//     }\n// }\n//\n// class Quiz extends Component {\n//     // Sets props and state to set values\n//     constructor (props) {\n//         super(props);\n//         this.state = {\n//             question: quizData[0].question,\n//             qsNo: 0,\n//             options: quizData[0].options,\n//             correctAnswer: \"Bristol Aerospace Museum\",\n//             correctCount: 0,\n//             incorrectCount: 0,\n//             flashMsg: \"\",\n//             score: 0,\n//             showPopup: false\n//         }\n//\n//         this.handleNavigation = this.handleNavigation.bind(this);\n//         this.handleAnswerClick = this.handleAnswerClick.bind(this);\n//\n//     }\n//\n//     // Function for when the user presses next/previous button\n//     handleNavigation(event){\n//\n//         // Event for when the user presses the next button\n//         // If the event is set to 'next' and there are still questions left...\n//         if(event === \"next\" && (this.state.qsNo < quizData.length - 1)) {\n//             console.log(this.state.qsNo + 1);\n//             // Add one to the Question No. value and pass data for the next question\n//             this.setState({ qsNo:(this.state.qsNo + 1) }, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options,\n//                     correctAnswer: quizData[this.state.qsNo].correct\n//                 })\n//             });\n//         // Otherwise, if the event is 'next' but there are no questions left in the data...\n//         } else if(event === \"next\" && (this.state.qsNo >= quizData.length - 1)) {\n//             // Set score counter to the user's overall score\n//             this.setState({\n//                 score: (this.state.correctCount * 50)\n//             })\n//             console.log(\"Game Over! Your score is \" + this.state.correctCount * 50)\n//         }\n//\n//         // Event for when the user presses the previous button\n//         // Unused, but goes back a question if the user clicks the previous button\n//\n//         if(event === \"previous\" && (this.state.qsNo >= 1)) {\n//             console.log(\"prvs\");\n//             this.setState({ qsNo:(this.state.qsNo - 1)}, () => {\n//                 this.setState({\n//                     question: quizData[this.state.qsNo].question,\n//                     options: quizData[this.state.qsNo].options\n//                 })\n//             });\n//         }\n//     }\n//\n//     // Function for when the user presses one of the answer buttons\n//     handleAnswerClick(option) {\n//         // Causes the next question to pop up\n//         // this.handleNavigation(\"next\");\n//         console.log(option); // Logs the answer that the user selects\n//\n//         // If the user selects the correct answer...\n//         if(this.state.correctAnswer === option){\n//             console.log(\"Correct\");\n//             // Add one to their correct answers count\n//             this.setState({correctCount: this.state.correctCount + 1})\n//         } else {\n//             // If not, then add one point to the incorrect score count\n//             this.setState({incorrectCount: this.state.incorrectCount + 1})\n//         }\n//     }\n//\n//     render () {\n//         return (\n//             <div className=\"quiz-container\">\n//                 <Back />\n//\n//                 {this.state.qsNo >= quizData.length - 1 &&\n//                     <ResultsEnd score={this.state.correctCount} />\n//                 }\n//                 { this.state.qsNo < quizData.length - 1 &&\n//\n//                     <Question questionData={ this.state.question }/> &&\n//\n//                     <Answers\n//                     options={ this.state.options }\n//                     onAnswerClick={ this.handleAnswerClick }\n//                     onClickFromParent={ this.handleNavigation }\n//                     /> &&\n//                     <Results\n//                     correctCount={ this.state.correctCount }\n//                     incorrectCount={ this.state.incorrectCount }\n//                     /> &&\n//                     <Navigation onClickFromParent={ this.handleNavigation }/>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// // Question tag (uses props)\n// const Question = (props) => {\n//     return(\n//         <div>\n//             <div className=\"question-component\">\n//                 <h3>{props.questionData}</h3>\n//             </div>\n//         </div>\n//     )\n// }\n//\n// // Answer tag\n// const Answers = (props) => {\n//     // Creates 'passOption' prop with event equal to the value of the answers from the data (via props)\n//     function passOption(e) {\n//         props.onAnswerClick(e);\n//\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//\n//     // Returns answers as text in the buttons. The 'onClick' contains a function that stores the data of the answer.\n//     // This is then run in the props where the answer is set to the answer clicked, being determined whether its\n//     // correct or incorrect.\n//     return(\n//         <div className=\"answer-container\" aria-disabled>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer1) }}\n//             >\n//                 {props.options.answer1}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer2) }}>{props.options.answer2}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer3) }}>{props.options.answer3}\n//             </button>\n//             <button\n//                 className=\"answer-btn\"\n//                 onClick={() => { passOption(props.options.answer4) }}>{props.options.answer4}\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Navigation tag\n// const Navigation = (props) => {\n//     // Creates next button variable that calls the \"next\" event from 'handleNavigation'\n//     const clickNext = () => {\n//         return(props.onClickFromParent(\"next\"));\n//     }\n//     const clickPrevious = () => {\n//         return(props.onClickFromParent(\"previous\"));\n//     }\n//\n//     return(\n//         <div>\n//             <button\n//                 className=\"p-info-next\"\n//                 onClick={clickNext}\n//             >\n//                 Next\n//             </button>\n//         </div>\n//     )\n// }\n//\n// // Score counter tag\n// const Results = (props) => {\n//         return(\n//             <div>\n//                 <h4>Score: {props.correctCount * 50}</h4>\n//                 Correct: {props.correctCount} | Incorrect: {props.incorrectCount}\n//             </div>\n//         )\n// }\n//\n// export default Quiz;\n\nimport React, {Component} from 'react';\n\nclass Question extends Component {\n    constructor(props){\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        e.preventDefault(); //Prevents full refresh\n        this.props.onChoiceChange(e.target.value);\n    }\n\n    render(){\n        const question = this.props.question;\n\n        return(\n            <div>\n                Question\n            </div>\n        )\n    }\n}\n\nclass Results extends Component {\n    render(){\n    }\n}\n\nclass Quiz extends Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            score: 0,\n            current: 1\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n    render () {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}