{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\n// import React, { useState } from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import GoogleMapReact from 'google-map-react';\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n//\n// // const LocationPin = ({ text }) => (\n// //     <div className=\"pin\">\n// //         <Icon icon={locationIcon} className=\"pin-icon\"/>\n// //         <p className=\"pin-text\">{text}</p>\n// //     </div>\n// // )\n// //\n// // const Map = ({ location, zoomLevel }) => (\n// //     <div className=\"map\">\n// //     </div>\n// // )\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// const getLocation = () => {\n//     if(navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(getCoordinates);\n//         alert(\"Geolocation: \" + this.state.latitude + this.state.longitude );\n//     } else {\n//         alert(\"Geolocation not supported by this browser\")\n//     }\n// }\n//\n//\n// const getCoordinates = (position) => {\n//     this.setState({\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//     })\n// }\n//\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//         >\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"Fact\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <InfoWindow\n//                         position={{\n//                             lat: selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             setSelectedInteraction(null);\n//                         }}\n//                         className=\"map-info-window\"\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ selectedInteraction.type }</h2>\n//                             <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                 <h3>{ selectedInteraction.description }</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <InfoWindow\n//                         position={{\n//                             lat: selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             setSelectedInteraction(null);\n//                         }}\n//                         className=\"map-info-window\"\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ selectedInteraction.type }</h2>\n//                             <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                 <h3>{ selectedInteraction.description }</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\nimport React, { useEffect, useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport GoogleMapReact from 'google-map-react';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\"; // const LocationPin = ({ text }) => (\n//     <div className=\"pin\">\n//         <Icon icon={locationIcon} className=\"pin-icon\"/>\n//         <p className=\"pin-text\">{text}</p>\n//     </div>\n// )\n//\n// const Map = ({ location, zoomLevel }) => (\n//     <div className=\"map\">\n//     </div>\n// )\n// Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  useEffect(() => {});\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"Geolocation: \" + this.state.latitude + this.state.longitude);\n        this.setState(prevState => ({\n          currentLatLng: { ...prevState.currentLatLng,\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }));\n      });\n    } else {\n      console.log(\"Geolocation not supported by this browser\");\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 20,\n      defaultCenter: {\n        lat: 51.523214,\n        lng: -2.578499\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }\n    }, Interaction.locations.map(interactions => /*#__PURE__*/React.createElement(Marker, {\n      key: interactions.id,\n      position: {\n        lat: interactions.coordinates[0],\n        lng: interactions.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interactions);\n      },\n      icon: interactions.type === \"Quiz\" && QuizIcon || interactions.type === \"Fact\" && FactIcon || interactions.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    })), // Function for if the button pressed is a QUIZ button\n    selectedInteraction === Interaction.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 33\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"map-basic-btn map-quiz-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 37\n      }\n    }, selectedInteraction.description))))) || // Function for if the button pressed is a FACT button\n    selectedInteraction === Interaction.locations[1] && /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 29\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/fact\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 33\n      }\n    }, selectedInteraction.description)))) || // Function for if the button pressed is a GAME button\n    selectedInteraction === Interaction.locations[2] && /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.000065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 29\n      }\n    }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n      to: \"/game\",\n      className: \"basic-btn game-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 33\n      }\n    }, selectedInteraction.description)))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useEffect","useState","Link","GoogleMapReact","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","Interaction","locations","UnwrappedMap","selectedInteraction","setSelectedInteraction","getLocation","navigator","geolocation","getCurrentPosition","position","console","log","state","latitude","longitude","setState","prevState","currentLatLng","lat","coords","lng","map","interactions","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"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","sourcesContent":["// import React, { useState } from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import GoogleMapReact from 'google-map-react';\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n//\n// // const LocationPin = ({ text }) => (\n// //     <div className=\"pin\">\n// //         <Icon icon={locationIcon} className=\"pin-icon\"/>\n// //         <p className=\"pin-text\">{text}</p>\n// //     </div>\n// // )\n// //\n// // const Map = ({ location, zoomLevel }) => (\n// //     <div className=\"map\">\n// //     </div>\n// // )\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// const getLocation = () => {\n//     if(navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(getCoordinates);\n//         alert(\"Geolocation: \" + this.state.latitude + this.state.longitude );\n//     } else {\n//         alert(\"Geolocation not supported by this browser\")\n//     }\n// }\n//\n//\n// const getCoordinates = (position) => {\n//     this.setState({\n//         latitude: position.coords.latitude,\n//         longitude: position.coords.longitude\n//     })\n// }\n//\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//         >\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"Fact\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <InfoWindow\n//                         position={{\n//                             lat: selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             setSelectedInteraction(null);\n//                         }}\n//                         className=\"map-info-window\"\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ selectedInteraction.type }</h2>\n//                             <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                 <h3>{ selectedInteraction.description }</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <InfoWindow\n//                         position={{\n//                             lat: selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             setSelectedInteraction(null);\n//                         }}\n//                         className=\"map-info-window\"\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ selectedInteraction.type }</h2>\n//                             <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                 <h3>{ selectedInteraction.description }</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\nimport React, {useEffect, useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport GoogleMapReact from 'google-map-react';\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\n\n// const LocationPin = ({ text }) => (\n//     <div className=\"pin\">\n//         <Icon icon={locationIcon} className=\"pin-icon\"/>\n//         <p className=\"pin-text\">{text}</p>\n//     </div>\n// )\n//\n// const Map = ({ location, zoomLevel }) => (\n//     <div className=\"map\">\n//     </div>\n// )\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    useEffect(() => {\n        \n    })\n\n    const getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n                console.log(\"Geolocation: \" + this.state.latitude + this.state.longitude );\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }))\n            });\n        } else {\n            console.log(\"Geolocation not supported by this browser\")\n        }\n    }\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={20}\n            defaultCenter={{lat: 51.523214, lng: -2.578499}}\n        >\n            {/* Maps JSON date to Function */}\n            {Interaction.locations.map((interactions) => (\n                <Marker\n                    key={interactions.id}\n                    position={{\n                        lat: interactions.coordinates[0],\n                        lng: interactions.coordinates[1]\n                    }}\n                    onClick={() => {\n                        setSelectedInteraction(interactions);\n                    }}\n                    icon={\n                        interactions.type === \"Quiz\" && (\n                            QuizIcon\n                        ) ||\n                        interactions.type === \"Fact\" && (\n                            FactIcon\n                        ) ||\n                        interactions.type === \"Game\" && (\n                            GameIcon\n                        )\n                    }\n                />\n            ))}\n\n            {\n                // Function for if the button pressed is a QUIZ button\n                selectedInteraction === Interaction.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{selectedInteraction.description}</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                // Function for if the button pressed is a FACT button\n                selectedInteraction === Interaction.locations[1] && (\n                    <InfoWindow\n                        position={{\n                            lat: selectedInteraction.coordinates[0] + 0.000065,\n                            lng: selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                            setSelectedInteraction(null);\n                        }}\n                        className=\"map-info-window\"\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ selectedInteraction.type }</h2>\n                            <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n                                <h3>{ selectedInteraction.description }</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                ) ||\n\n                // Function for if the button pressed is a GAME button\n                selectedInteraction === Interaction.locations[2] && (\n                    <InfoWindow\n                        position={{\n                            lat: selectedInteraction.coordinates[0] + 0.000065,\n                            lng: selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                            setSelectedInteraction(null);\n                        }}\n                        className=\"map-info-window\"\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ selectedInteraction.type }</h2>\n                            <Link to=\"/game\" className=\"basic-btn game-btn\">\n                                <h3>{ selectedInteraction.description }</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                )\n\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}