{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\n// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     selectedInteraction () {\n//         useState(null);\n//     }\n//     setSelectedInteraction() {\n//         useState(null);\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\nimport React, { Component, useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport { compose, withProps } from \"recompose\";\nimport { Link } from \"react-router-dom\";\nconst MapInteractions = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nconst getLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log(position.coords);\n      this.setState(prevState => ({\n        currentLatLng: { ...prevState.currentLatLng,\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }));\n    });\n  } else {\n    console.log(\"error\");\n  }\n};\n\nconst UnwrappedMap = compose(withProps({\n  googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 25\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100vh`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  })\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/React.createElement(GoogleMap, {\n  defaultZoom: 25,\n  center: {\n    lat: props.currentLocation.lat,\n    lng: props.currentLocation.lng\n  },\n  defaultCenter: {\n    lat: 51.523214,\n    lng: -2.578499\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }\n}, props.isMarkerShown && /*#__PURE__*/React.createElement(Marker, {\n  position: {\n    lat: props.currentLocation.lat,\n    lng: props.currentLocation.lng\n  },\n  onClick: props.onMarkerClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 9\n  }\n}), MapInteractions.locations.map(clickableInteractions => /*#__PURE__*/React.createElement(Marker, {\n  key: clickableInteractions.id,\n  position: {\n    lat: clickableInteractions.coordinates[0],\n    lng: clickableInteractions.coordinates[1]\n  },\n  onClick: () => {\n    props.setSelectedInteraction(clickableInteractions);\n  },\n  icon: clickableInteractions.type === \"Quiz\" && QuizIcon || clickableInteractions.type === \"Fact\" && FactIcon || clickableInteractions.type === \"Game\" && GameIcon,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 13\n  }\n})), props.selectedInteraction === MapInteractions.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n  className: \"map-info-window\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 17\n  }\n}, /*#__PURE__*/React.createElement(InfoWindow, {\n  position: {\n    lat: props.selectedInteraction.coordinates[0] + 0.000065,\n    lng: props.selectedInteraction.coordinates[1]\n  },\n  onCloseClick: () => {},\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 21\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"map-button\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 25\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 29\n  }\n}, props.selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n  to: \"/quiz\",\n  className: \"map-basic-btn map-quiz-btn\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 29\n  }\n}, /*#__PURE__*/React.createElement(\"h3\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 33\n  }\n}, props.selectedInteraction.description)))))));\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.handleMarkerClick = () => {\n      this.setState({\n        isMarkerShown: false\n      });\n      this.delayedShowMarker();\n    };\n\n    this.getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLatLng: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLatLng: {\n        lat: null,\n        lng: null\n      },\n      isMarkerShown: false,\n      selectedInteraction: null,\n      setSelectedInteraction: null\n    };\n  }\n\n  selectedInteraction() {\n    useState(null);\n  }\n\n  setSelectedInteraction() {\n    useState(null);\n  }\n\n  componentWillUpdate() {\n    this.getLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UnwrappedMap, {\n      isMarkerShown: this.state.isMarkerShown,\n      onMarkerClick: this.handleMarkerClick,\n      currentLocation: this.state.currentLatLng,\n      selectedInteraction: this.state.selectedInteraction,\n      setSelectedInteraction: this.state.setSelectedInteraction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default MapTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","useState","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","compose","withProps","Link","MapInteractions","locations","getLocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","setState","prevState","currentLatLng","lat","latitude","lng","longitude","UnwrappedMap","googleMapURL","process","env","REACT_APP_GOOGLE_KEY","loadingElement","height","containerElement","mapElement","props","currentLocation","isMarkerShown","onMarkerClick","map","clickableInteractions","id","coordinates","setSelectedInteraction","type","QuizIcon","FactIcon","GameIcon","selectedInteraction","description","MapTest","constructor","delayedShowMarker","setTimeout","handleMarkerClick","state","componentWillUpdate","componentDidMount","render"],"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","sourcesContent":["// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     selectedInteraction () {\n//         useState(null);\n//     }\n//     setSelectedInteraction() {\n//         useState(null);\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\n\nimport React, { Component, useState } from 'react'\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport {compose, withProps} from \"recompose\";\nimport {Link} from \"react-router-dom\";\n\nconst MapInteractions = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nconst getLocation = () => {\n    if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                console.log(position.coords);\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }))\n            }\n        )\n    } else {\n        console.log(\"error\")\n    }\n}\n\nconst UnwrappedMap = compose(\n    withProps({\n        googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n        loadingElement: <div style={{ height: `100%` }} />,\n        containerElement: <div style={{ height: `100vh` }} />,\n        mapElement: <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap\n)((props) =>\n    <GoogleMap\n        defaultZoom={25}\n        center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n        defaultCenter={{lat: 51.523214, lng: -2.578499}}\n    >\n        {props.isMarkerShown &&\n        <Marker\n            position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n            onClick={props.onMarkerClick}\n        />\n        }\n        {MapInteractions.locations.map(clickableInteractions => (\n            <Marker\n                key={clickableInteractions.id}\n                position={{\n                    lat: clickableInteractions.coordinates[0],\n                    lng: clickableInteractions.coordinates[1]\n                }}\n                onClick={() => {\n                    props.setSelectedInteraction(clickableInteractions);\n                }}\n                icon={\n                    clickableInteractions.type === \"Quiz\" && (QuizIcon)\n                    ||\n                    clickableInteractions.type === \"Fact\" && (FactIcon)\n                    ||\n                    clickableInteractions.type === \"Game\" && (GameIcon)\n                }\n            />\n        ))}\n        {\n            props.selectedInteraction === MapInteractions.locations[0] && (\n                <div className=\"map-info-window\">\n                    <InfoWindow\n                        position={{\n                            lat: props.selectedInteraction.coordinates[0] + 0.000065,\n                            lng: props.selectedInteraction.coordinates[1]\n                        }}\n                        onCloseClick={() => {\n                        }}\n                    >\n                        <div className=\"map-button\">\n                            <h2>{ props.selectedInteraction.type }</h2>\n                            <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                <h3>{props.selectedInteraction.description}</h3>\n                            </Link>\n                        </div>\n                    </InfoWindow>\n                </div>\n            )\n        }\n\n    </GoogleMap>\n)\n\nclass MapTest extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentLatLng: {\n                lat: null,\n                lng: null\n            },\n            isMarkerShown: false,\n            selectedInteraction: null,\n            setSelectedInteraction: null\n        }\n    }\n\n    selectedInteraction () {\n        useState(null);\n    }\n    setSelectedInteraction() {\n        useState(null);\n    }\n\n    componentWillUpdate () {\n        this.getLocation()\n    }\n\n    componentDidMount () {\n        this.delayedShowMarker()\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    handleMarkerClick = () => {\n        this.setState({ isMarkerShown: false })\n        this.delayedShowMarker()\n    }\n\n    getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLatLng: {\n                            ...prevState.currentLatLng,\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n\n    render() {\n        return (\n            <UnwrappedMap\n                isMarkerShown={this.state.isMarkerShown}\n                onMarkerClick={this.handleMarkerClick}\n                currentLocation={this.state.currentLatLng}\n                selectedInteraction={this.state.selectedInteraction}\n                setSelectedInteraction={this.state.setSelectedInteraction}\n            />\n        )\n    }\n}\n\n\n\nexport default MapTest;\n\n"]},"metadata":{},"sourceType":"module"}