{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\n// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     selectedInteraction () {\n//         useState(null);\n//     }\n//     setSelectedInteraction() {\n//         useState(null);\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\nimport React, { Component, useState, useEffect } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport { compose, withProps } from \"recompose\";\nimport { Link } from \"react-router-dom\";\nconst MapInteractions = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nconst getLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(position => {\n      console.log(position.coords);\n      this.setState(prevState => ({\n        currentLatLng: { ...prevState.currentLatLng,\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }));\n    });\n  } else {\n    console.log(\"error\");\n  }\n};\n\nclass UnwrapMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLocation: { ...prevState.currentLocation,\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLocation: {\n        latitude: null,\n        longitude: null\n      },\n      isMarkerShown: false\n    };\n  }\n\n  componentWillUpdate() {\n    this.getLocation();\n  } // Parameter for getting user's current location (via coordinates)\n\n\n}\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  useEffect(() => {\n    // Update the document title using the browser API\n    getLocation();\n  });\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 25,\n    center: {\n      lat: 51.523214,\n      lng: -2.578499\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }, MapInteractions.locations.map(clickInteractions => /*#__PURE__*/React.createElement(Marker, {\n    key: clickInteractions.id,\n    position: {\n      lat: clickInteractions.coordinates[0],\n      lng: clickInteractions.coordinates[1]\n    },\n    icon: clickInteractions.type === \"Quiz\" && QuizIcon || clickInteractions.type === \"Fact\" && FactIcon || clickInteractions.type === \"Game\" && GameIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  })), // Quiz Button\n  selectedInteraction === MapInteractions.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-info-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedInteraction.coordinates[0] + 0.000065,\n      lng: selectedInteraction.coordinates[1]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 33\n    }\n  }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n    to: \"/quiz\",\n    className: \"map-basic-btn map-quiz-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 37\n    }\n  }, selectedInteraction.description))))) || // Fact Button\n  selectedInteraction === MapInteractions.locations[1] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-info-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedInteraction.coordinates[0] + 0.000065,\n      lng: selectedInteraction.coordinates[1]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 33\n    }\n  }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n    to: \"/quiz\",\n    className: \"map-basic-btn fact-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 37\n    }\n  }, selectedInteraction.description))))) || // Game Button\n  selectedInteraction === MapInteractions.locations[2] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-info-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedInteraction.coordinates[0] + 0.000065,\n      lng: selectedInteraction.coordinates[1]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 33\n    }\n  }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n    to: \"/quiz\",\n    className: \"map-basic-btn game-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 37\n    }\n  }, selectedInteraction.description))))));\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function MapTestTwo() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }\n  }));\n} // const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","useState","useEffect","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","compose","withProps","Link","MapInteractions","locations","getLocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","setState","prevState","currentLatLng","lat","latitude","lng","longitude","UnwrapMap","constructor","props","currentLocation","state","isMarkerShown","componentWillUpdate","UnwrappedMap","selectedInteraction","setSelectedInteraction","map","clickInteractions","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","MapTestTwo","width","height","process","env","REACT_APP_GOOGLE_KEY"],"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AC,UAAD;AACI,IAAA,YAAY,EAAG,yFAAwFC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,EAD5I;AAEI,IAAA,cAAc,eAAG;AAAK,MAAA,KAAK,EAAE;AAACH,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrB;AAGI,IAAA,gBAAgB,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHvB;AAII,IAAA,UAAU,eAAG;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAUH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     selectedInteraction () {\n//         useState(null);\n//     }\n//     setSelectedInteraction() {\n//         useState(null);\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\n\n\n\n\n\n\n\n\n\n\n\nimport React, { Component, useState, useEffect } from 'react'\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport {compose, withProps} from \"recompose\";\nimport {Link} from \"react-router-dom\";\n\nconst MapInteractions = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nconst getLocation = () => {\n    if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                console.log(position.coords);\n                this.setState(prevState => ({\n                    currentLatLng: {\n                        ...prevState.currentLatLng,\n                        lat: position.coords.latitude,\n                        lng: position.coords.longitude\n                    }\n                }))\n            }\n        )\n    } else {\n        console.log(\"error\")\n    }\n}\n\nclass UnwrapMap extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            currentLocation: { latitude: null, longitude: null},\n            isMarkerShown: false\n        }\n    }\n\n    componentWillUpdate () {\n        this.getLocation()\n    }\n\n    // Parameter for getting user's current location (via coordinates)\n    getLocation = () => {\n        if(navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLocation: {\n                            ...prevState.currentLocation,\n                            latitude: position.coords.latitude,\n                            longitude: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        getLocation()\n    });\n\n\n    return(\n        <GoogleMap\n            defaultZoom={25}\n            center={{lat: 51.523214, lng: -2.578499}}\n        >\n            {/* Set Location Markers */}\n            {MapInteractions.locations.map((clickInteractions) => (\n                <Marker\n                    key={clickInteractions.id}\n                    position={{\n                        lat: clickInteractions.coordinates[0],\n                        lng: clickInteractions.coordinates[1]\n                    }}\n                    icon={\n                        clickInteractions.type === \"Quiz\" && (QuizIcon)\n                        ||\n                        clickInteractions.type === \"Fact\" && (FactIcon)\n                        ||\n                        clickInteractions.type === \"Game\" && (GameIcon)\n                    }\n                />\n            ))}\n\n            {/* Selected Interaction Display */}\n            {\n                // Quiz Button\n                selectedInteraction === MapInteractions.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                // Fact Button\n                selectedInteraction === MapInteractions.locations[1] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn fact-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n                // Game Button\n                selectedInteraction === MapInteractions.locations[2] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn game-btn\">\n                                    <h3>{ selectedInteraction.description }</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function MapTestTwo () {\n    return(\n        <div style={{width: '100%', height: '100%'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{lat: props.currentLocation.lat, lng: props.currentLocation.lng}}\n//         defaultCenter={{lat: 51.523214, lng: -2.578499}}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// class MapTest extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: null,\n//                 lng: null\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     componentWillUpdate () {\n//         this.getLocation()\n//     }\n//\n//     componentDidMount () {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getLocation = () => {\n//         if(navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//                 selectedInteraction={this.state.selectedInteraction}\n//                 setSelectedInteraction={this.state.setSelectedInteraction}\n//             />\n//         )\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}