{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx\";\n// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             sectionOne: [\n//                 {\n//                     \"id\": 1,\n//                     \"type\": \"Quiz\",\n//                     \"coordinates\": [51.523406, -2.578008],\n//                     \"description\": \"Test Me!\"\n//                 },\n//                 {\n//                     \"id\": 1,\n//                     \"type\": \"Fact\",\n//                     \"coordinates\": [51.523323, -2.577915],\n//                     \"description\": \"Learn!\"\n//                 }\n//             ]\n//         },\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"Fact\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\n/* global google */\nimport React, { useState } from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\nimport { usePosition } from 'use-position';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow, GroundOverlay } from 'react-google-maps';\nimport GameIcon from \"./assets/game-icon.svg\";\nimport QuizIcon from \"./assets/quiz-icon.svg\";\nimport FactIcon from \"./assets/fact-icon.svg\";\nimport MapOverlay from \"./assets/main-building.svg\"; // Impromptu JSON data for locations\n\nconst Interaction = {\n  locations: {\n    sectionOne: [{\n      \"id\": 1,\n      \"type\": \"Quiz\",\n      \"coordinates\": [51.523406, -2.578008],\n      \"description\": \"Test Me!\",\n      \"complete\": false\n    }, {\n      \"id\": 2,\n      \"type\": \"Fact\",\n      \"coordinates\": [51.523323, -2.577915],\n      \"description\": \"Learn!\",\n      \"complete\": false\n    }],\n    sectionTwo: [{\n      \"id\": 1,\n      \"type\": \"Game\",\n      \"coordinates\": [51.523213, -2.578062],\n      \"description\": \"Let's Play!\",\n      \"complete\": false\n    }]\n  }\n};\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  const watch = true;\n  const {\n    latitude,\n    longitude\n  } = usePosition(watch, {\n    enableHighAccuracy: true\n  });\n  return (\n    /*#__PURE__*/\n    // Creates map\n    React.createElement(GoogleMap, {\n      defaultZoom: 20,\n      defaultCenter: {\n        lat: latitude,\n        lng: longitude\n      },\n      center: {\n        lat: 51.523160,\n        lng: -2.578440\n      },\n      options: {\n        fullscreenControl: false,\n        zoomControl: false,\n        streetViewControl: false,\n        mapTypeControl: false,\n        // draggable: false,\n        clickableIcons: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GroundOverlay, {\n      bounds: new google.maps.LatLngBounds(new google.maps.LatLng(51.522800, -2.578910), new google.maps.LatLng(51.523655, -2.577485)),\n      url: MapOverlay,\n      opacity: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: latitude,\n        lng: longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }\n    }), Interaction.locations.sectionOne.map(interaction => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      key: interaction.id,\n      position: {\n        lat: interaction.coordinates[0],\n        lng: interaction.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interaction);\n      },\n      icon: interaction.type === \"Quiz\" && QuizIcon || interaction.type === \"Fact\" && FactIcon || interaction.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 25\n      }\n    }))), Interaction.locations.sectionTwo.map(interaction => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      key: interaction.id,\n      position: {\n        lat: interaction.coordinates[0],\n        lng: interaction.coordinates[1]\n      },\n      onClick: () => {\n        setSelectedInteraction(interaction);\n      },\n      icon: interaction.type === \"Quiz\" && QuizIcon || interaction.type === \"Fact\" && FactIcon || interaction.type === \"Game\" && GameIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 25\n      }\n    }))), selectedInteraction === \"Quiz\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.00065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 33\n      }\n    }, \" \", selectedInteraction.type, \" \"), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"map-basic-btn map-quiz-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 37\n      }\n    }, \" \", selectedInteraction.description, \" \"))))) || selectedInteraction === \"Fact\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.00065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 33\n      }\n    }, \" \", selectedInteraction.type, \" \"), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"basic-btn fact-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 37\n      }\n    }, \" \", selectedInteraction.description, \" \"))))) || selectedInteraction === \"Game\" && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-info-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InfoWindow, {\n      position: {\n        lat: selectedInteraction.coordinates[0] + 0.00065,\n        lng: selectedInteraction.coordinates[1]\n      },\n      onCloseClick: () => {\n        setSelectedInteraction(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 33\n      }\n    }, \" \", selectedInteraction.type, \" \"), /*#__PURE__*/React.createElement(Link, {\n      to: \"/quiz\",\n      className: \"basic-btn game-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 37\n      }\n    }, \" \", selectedInteraction.description, \" \"))))))\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\nexport default function Map() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: '-2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 34\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 36\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/map/map.jsx"],"names":["React","useState","Link","usePosition","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","GroundOverlay","Interaction","locations","sectionOne","sectionTwo","UnwrappedMap","selectedInteraction","setSelectedInteraction","watch","latitude","longitude","enableHighAccuracy","lat","lng","fullscreenControl","zoomControl","streetViewControl","mapTypeControl","clickableIcons","google","maps","LatLngBounds","LatLng","MapOverlay","map","interaction","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","Map","width","height","zIndex","process","env","REACT_APP_GOOGLE_KEY"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,WAAT,QAA4B,cAA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","sourcesContent":["// /* global google */\n// import React, {useState} from 'react';\n// import './map.css';\n// import { Link } from 'react-router-dom';\n//\n// import { usePosition } from 'use-position';\n//\n// import {\n//     GoogleMap,\n//     withScriptjs,\n//     withGoogleMap,\n//     Marker,\n//     InfoWindow,\n//     GroundOverlay\n// } from 'react-google-maps';\n//\n// import GameIcon from './assets/game-icon.svg';\n// import QuizIcon from './assets/quiz-icon.svg';\n// import FactIcon from './assets/fact-icon.svg';\n// import MapOverlay from './assets/main-building.svg';\n//\n// // Impromptu JSON data for locations\n// const Interaction = {\n//     locations: [\n//         {\n//             sectionOne: [\n//                 {\n//                     \"id\": 1,\n//                     \"type\": \"Quiz\",\n//                     \"coordinates\": [51.523406, -2.578008],\n//                     \"description\": \"Test Me!\"\n//                 },\n//                 {\n//                     \"id\": 1,\n//                     \"type\": \"Fact\",\n//                     \"coordinates\": [51.523323, -2.577915],\n//                     \"description\": \"Learn!\"\n//                 }\n//             ]\n//         },\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523406, -2.578008],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523120, -2.578284],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523323, -2.577915],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 4,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// function UnwrappedMap() {\n//\n//     const [selectedInteraction, setSelectedInteraction] = useState(null);\n//\n//     const watch = true;\n//     const { latitude, longitude } =\n//         usePosition(watch, {enableHighAccuracy: true});\n//\n//\n//     return (\n//         // Creates map\n//         <GoogleMap\n//             defaultZoom={20}\n//             defaultCenter={{lat: latitude, lng: longitude}}\n//             center={{ lat: 51.523160, lng: -2.578440 }}\n//             options={{\n//                 fullscreenControl: false,\n//                 zoomControl: false,\n//                 streetViewControl: false,\n//                 mapTypeControl: false,\n//                 // draggable: false,\n//                 clickableIcons: false,\n//             }}\n//         >\n//             <GroundOverlay\n//                 bounds={new google.maps.LatLngBounds(\n//                     new google.maps.LatLng(51.522800, -2.578910),\n//                     new google.maps.LatLng(51.523655, -2.577485)\n//                 )}\n//                 url={MapOverlay}\n//                 opacity={1}\n//             />\n//             {/* User Location Marker*/}\n//\n//             <Marker\n//                 position={{ lat: latitude, lng: longitude }}\n//             />\n//             {/* Maps JSON date to Function */}\n//             {Interaction.locations.map((interactions) => (\n//                 <Marker\n//                     key={interactions.id}\n//                     position={{\n//                         lat: interactions.coordinates[0],\n//                         lng: interactions.coordinates[1]\n//                     }}\n//                     onClick={() => {\n//                         setSelectedInteraction(interactions);\n//                     }}\n//                     icon={\n//                         interactions.type === \"Quiz\" && (\n//                             QuizIcon\n//                         ) ||\n//                         interactions.type === \"Fact\" && (\n//                             FactIcon\n//                         ) ||\n//                             interactions.type === \"Game\" && (\n//                                 GameIcon\n//                         )\n//                     }\n//                 />\n//             ))}\n//\n//             {\n//                 // Function for if the button pressed is a QUIZ button\n//                 selectedInteraction === Interaction.locations[0] && (\n//                     <div className=\"map-info-window\">\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                     <h3>{selectedInteraction.description}</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a FACT button\n//                 selectedInteraction === Interaction.locations[1] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/fact\" className=\"basic-btn fact-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 ) ||\n//\n//                 // Function for if the button pressed is a GAME button\n//                 selectedInteraction === Interaction.locations[2] && (\n//                     <div>\n//                         <InfoWindow\n//                             position={{\n//                                 lat: selectedInteraction.coordinates[0] + 0.000065,\n//                                 lng: selectedInteraction.coordinates[1]\n//                             }}\n//                             onCloseClick={() => {\n//                                 setSelectedInteraction(null);\n//                             }}\n//                             className=\"map-info-window\"\n//                         >\n//                             <div className=\"map-button\">\n//                                 <h2>{ selectedInteraction.type }</h2>\n//                                 <Link to=\"/game\" className=\"basic-btn game-btn\">\n//                                     <h3>{ selectedInteraction.description }</h3>\n//                                 </Link>\n//                             </div>\n//                         </InfoWindow>\n//                     </div>\n//                 )\n//\n//             }\n//         </GoogleMap>\n//     )\n// }\n//\n// const WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n//\n// export default function Map() {\n//     return (\n//         <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n//             <WrappedMap\n//                 googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n//                 loadingElement={ <div style={{height: '100%'}} /> }\n//                 containerElement={ <div style={{height: '100%'}} />}\n//                 mapElement={ <div style={{height: '100%'}} />}\n//             />\n//         </div>\n//     )\n// }\n\n/* global google */\nimport React, {useState} from 'react';\nimport './map.css';\nimport { Link } from 'react-router-dom';\n\nimport { usePosition } from 'use-position';\n\nimport {\n    GoogleMap,\n    withScriptjs,\n    withGoogleMap,\n    Marker,\n    InfoWindow,\n    GroundOverlay\n} from 'react-google-maps';\n\nimport GameIcon from './assets/game-icon.svg';\nimport QuizIcon from './assets/quiz-icon.svg';\nimport FactIcon from './assets/fact-icon.svg';\nimport MapOverlay from './assets/main-building.svg';\n\n// Impromptu JSON data for locations\nconst Interaction = {\n    locations: {\n        sectionOne: [\n            {\n                \"id\": 1,\n                \"type\": \"Quiz\",\n                \"coordinates\": [51.523406, -2.578008],\n                \"description\": \"Test Me!\",\n                \"complete\": false\n            },\n            {\n                \"id\": 2,\n                \"type\": \"Fact\",\n                \"coordinates\": [51.523323, -2.577915],\n                \"description\": \"Learn!\",\n                \"complete\": false\n            }\n        ],\n\n        sectionTwo: [\n            {\n                \"id\": 1,\n                \"type\": \"Game\",\n                \"coordinates\": [51.523213, -2.578062],\n                \"description\": \"Let's Play!\",\n                \"complete\": false\n            }\n        ]\n    },\n}\n\nfunction UnwrappedMap() {\n\n    const [selectedInteraction, setSelectedInteraction] = useState(null);\n\n    const watch = true;\n    const { latitude, longitude } =\n        usePosition(watch, {enableHighAccuracy: true});\n\n\n    return (\n        // Creates map\n        <GoogleMap\n            defaultZoom={20}\n            defaultCenter={{lat: latitude, lng: longitude}}\n            center={{ lat: 51.523160, lng: -2.578440 }}\n            options={{\n                fullscreenControl: false,\n                zoomControl: false,\n                streetViewControl: false,\n                mapTypeControl: false,\n                // draggable: false,\n                clickableIcons: false,\n            }}\n        >\n            <GroundOverlay\n                bounds={new google.maps.LatLngBounds(\n                    new google.maps.LatLng(51.522800, -2.578910),\n                    new google.maps.LatLng(51.523655, -2.577485)\n                )}\n                url={MapOverlay}\n                opacity={1}\n            />\n\n            {/* User Location Marker*/}\n            <Marker\n                position={{ lat: latitude, lng: longitude }}\n            />\n\n            {\n                Interaction.locations.sectionOne.map ((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                            }}\n                            icon={\n                                interaction.type === \"Quiz\" && (QuizIcon)\n                                ||\n                                interaction.type === \"Fact\" && (FactIcon)\n                                ||\n                                interaction.type === \"Game\" && (GameIcon)\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                Interaction.locations.sectionTwo.map((interaction) => (\n                    <div>\n                        <Marker\n                            key={interaction.id}\n                            position={{\n                                lat: interaction.coordinates[0],\n                                lng: interaction.coordinates[1]\n                            }}\n                            onClick={() => {\n                                setSelectedInteraction(interaction)\n                            }}\n                            icon={\n                                interaction.type === \"Quiz\" && (QuizIcon)\n                                ||\n                                interaction.type === \"Fact\" && (FactIcon)\n                                ||\n                                interaction.type === \"Game\" && (GameIcon)\n                            }\n                        />\n                    </div>\n                ))\n            }\n\n            {\n                selectedInteraction === \"Quiz\" && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.00065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null)\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2> {selectedInteraction.type} </h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3> {selectedInteraction.description} </h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                selectedInteraction === \"Fact\" && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.00065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null)\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2> {selectedInteraction.type} </h2>\n                                <Link to=\"/quiz\" className=\"basic-btn fact-btn\">\n                                    <h3> {selectedInteraction.description} </h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                ) ||\n\n                selectedInteraction === \"Game\" && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.00065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null)\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2> {selectedInteraction.type} </h2>\n                                <Link to=\"/quiz\" className=\"basic-btn game-btn\">\n                                    <h3> {selectedInteraction.description} </h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap));\n\nexport default function Map() {\n    return (\n        <div style={{width: '100%', height: '100%', zIndex: '-2'}}>\n            <WrappedMap\n                googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\n                loadingElement={ <div style={{height: '100%'}} /> }\n                containerElement={ <div style={{height: '100%'}} />}\n                mapElement={ <div style={{height: '100%'}} />}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}