{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js\";\n// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             props.setSelectedInteraction(null);\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//\n//\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: 0,\n//                 lng: 0\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     componentWillUpdate(){\n//         this.getGeoLocation()\n//     }\n//\n//     componentDidMount() {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getGeoLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getGeoLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\nimport React, { Component, useState } from 'react';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport { compose, withProps } from \"recompose\";\nimport { Link } from \"react-router-dom\";\n\nfunction UnwrappedMap() {\n  const [selectedInteraction, setSelectedInteraction] = useState(null);\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 25,\n    defaultCenter: {\n      lat: this.props.currentLocation.lat,\n      lng: this.props.currentLocation.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, this.props.isMarkerShown && /*#__PURE__*/React.createElement(Marker, {\n    position: {\n      lat: this.props.currentLocation.lat,\n      lng: this.props.currentLocation.lng\n    },\n    onClick: this.props.onMarkerClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }), MapInteractions.locations.map(clickInteraction => /*#__PURE__*/React.createElement(Marker, {\n    key: clickInteraction.id,\n    position: {\n      lat: clickInteraction.coordinates[0],\n      lng: clickInteraction.coordinates[1]\n    },\n    onClick: () => {\n      setSelectedInteraction(clickInteraction);\n    },\n    icon: clickInteraction.type === \"Quiz\" && QuizIcon || clickInteraction.type === \"Fact\" && FactIcon || clickInteraction.type === \"Game\" && GameIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  })), selectedInteraction === MapInteractions.locations[0] && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-info-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedInteraction.coordinates[0] + 0.000065,\n      lng: selectedInteraction.coordinates[1]\n    },\n    onCloseClick: () => {\n      setSelectedInteraction(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 33\n    }\n  }, selectedInteraction.type), /*#__PURE__*/React.createElement(Link, {\n    to: \"/quiz\",\n    className: \"map-basic-btn map-quiz-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }, selectedInteraction.description))))));\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap)); // const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             props.setSelectedInteraction(null);\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n\nconst MapInteractions = {\n  locations: [{\n    \"id\": 1,\n    \"type\": \"Quiz\",\n    \"coordinates\": [51.523147, -2.577680],\n    \"description\": \"Test Me!\"\n  }, {\n    \"id\": 2,\n    \"type\": \"Fact\",\n    \"coordinates\": [51.523160, -2.578440],\n    \"description\": \"Learn!\"\n  }, {\n    \"id\": 3,\n    \"type\": \"Game\",\n    \"coordinates\": [51.523531, -2.578289],\n    \"description\": \"Let's Play!\"\n  }]\n};\n\nclass MapTest extends Component {\n  constructor(props) {\n    super(props);\n\n    this.delayedShowMarker = () => {\n      setTimeout(() => {\n        this.getGeoLocation();\n        this.setState({\n          isMarkerShown: true\n        });\n      }, 5000);\n    };\n\n    this.handleMarkerClick = () => {\n      this.setState({\n        isMarkerShown: false\n      });\n      this.delayedShowMarker();\n    };\n\n    this.getGeoLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log(position.coords);\n          this.setState(prevState => ({\n            currentLatLng: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        console.log(\"error\");\n      }\n    };\n\n    this.state = {\n      currentLatLng: {\n        lat: 0,\n        lng: 0\n      },\n      isMarkerShown: false\n    };\n  }\n\n  componentWillUpdate() {\n    this.getGeoLocation();\n  }\n\n  componentDidMount() {\n    this.delayedShowMarker();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UnwrappedMap, {\n      isMarkerShown: this.state.isMarkerShown,\n      onMarkerClick: this.handleMarkerClick,\n      currentLocation: this.state.currentLatLng,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default MapTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/aero-frontend/src/components/mapTestTwo/mapTest.js"],"names":["React","Component","useState","withScriptjs","withGoogleMap","GoogleMap","Marker","InfoWindow","compose","withProps","Link","UnwrappedMap","selectedInteraction","setSelectedInteraction","lat","props","currentLocation","lng","isMarkerShown","onMarkerClick","MapInteractions","locations","map","clickInteraction","id","coordinates","type","QuizIcon","FactIcon","GameIcon","description","WrappedMap","MapTest","constructor","delayedShowMarker","setTimeout","getGeoLocation","setState","handleMarkerClick","navigator","geolocation","getCurrentPosition","position","console","log","coords","prevState","currentLatLng","latitude","longitude","state","componentWillUpdate","componentDidMount","render"],"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","sourcesContent":["// import React, { Component, useState } from 'react'\n// import {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\n// import QuizIcon from \"../map/assets/quiz-icon.svg\";\n// import FactIcon from \"../map/assets/picture-icon.svg\";\n// import GameIcon from \"../map/assets/game-icon.svg\";\n// import {compose, withProps} from \"recompose\";\n// import {Link} from \"react-router-dom\";\n//\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             props.setSelectedInteraction(null);\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n//\n// const MapInteractions = {\n//     locations: [\n//         {\n//             \"id\": 1,\n//             \"type\": \"Quiz\",\n//             \"coordinates\": [51.523147, -2.577680],\n//             \"description\": \"Test Me!\"\n//         },\n//         {\n//             \"id\": 2,\n//             \"type\": \"Fact\",\n//             \"coordinates\": [51.523160, -2.578440],\n//             \"description\": \"Learn!\"\n//         },\n//         {\n//             \"id\": 3,\n//             \"type\": \"Game\",\n//             \"coordinates\": [51.523531, -2.578289],\n//             \"description\": \"Let's Play!\"\n//         }\n//     ]\n// }\n//\n// class MapTest extends Component {\n//\n//\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             currentLatLng: {\n//                 lat: 0,\n//                 lng: 0\n//             },\n//             isMarkerShown: false,\n//             selectedInteraction: null,\n//             setSelectedInteraction: null\n//         }\n//     }\n//\n//     componentWillUpdate(){\n//         this.getGeoLocation()\n//     }\n//\n//     componentDidMount() {\n//         this.delayedShowMarker()\n//     }\n//\n//     delayedShowMarker = () => {\n//         setTimeout(() => {\n//             this.getGeoLocation()\n//             this.setState({ isMarkerShown: true })\n//         }, 5000)\n//     }\n//\n//     handleMarkerClick = () => {\n//         this.setState({ isMarkerShown: false })\n//         this.delayedShowMarker()\n//     }\n//\n//     getGeoLocation = () => {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 position => {\n//                     console.log(position.coords);\n//                     this.setState(prevState => ({\n//                         currentLatLng: {\n//                             ...prevState.currentLatLng,\n//                             lat: position.coords.latitude,\n//                             lng: position.coords.longitude\n//                         }\n//                     }))\n//                 }\n//             )\n//         } else {\n//             console.log(\"error\")\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <UnwrappedMap\n//                 isMarkerShown={this.state.isMarkerShown}\n//                 onMarkerClick={this.handleMarkerClick}\n//                 currentLocation={this.state.currentLatLng}\n//             />\n//         )\n//     }\n// }\n//\n// export default MapTest;\n\nimport React, { Component, useState } from 'react'\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from 'react-google-maps'\nimport QuizIcon from \"../map/assets/quiz-icon.svg\";\nimport FactIcon from \"../map/assets/picture-icon.svg\";\nimport GameIcon from \"../map/assets/game-icon.svg\";\nimport {compose, withProps} from \"recompose\";\nimport {Link} from \"react-router-dom\";\n\nfunction UnwrappedMap() {\n\n    const [ selectedInteraction, setSelectedInteraction ] = useState(null);\n\n    return(\n        <GoogleMap\n            defaultZoom={25}\n            defaultCenter={{lat: this.props.currentLocation.lat, lng: this.props.currentLocation.lng}}\n        >\n            {this.props.isMarkerShown &&\n                <Marker\n                    position={{ lat: this.props.currentLocation.lat, lng: this.props.currentLocation.lng }}\n                    onClick={this.props.onMarkerClick}\n                />\n            }\n            {MapInteractions.locations.map((clickInteraction) => (\n                <Marker\n                    key={clickInteraction.id}\n                    position={{\n                        lat: clickInteraction.coordinates[0],\n                        lng: clickInteraction.coordinates[1]\n                    }}\n                    onClick={() => {\n                        setSelectedInteraction(clickInteraction)\n                    }}\n                    icon={\n                        clickInteraction.type === \"Quiz\" && (QuizIcon)\n                        ||\n                        clickInteraction.type === \"Fact\" && (FactIcon)\n                        ||\n                        clickInteraction.type === \"Game\" && (GameIcon)\n                    }\n                />\n            ))}\n            {\n                selectedInteraction === MapInteractions.locations[0] && (\n                    <div className=\"map-info-window\">\n                        <InfoWindow\n                            position={{\n                                lat: selectedInteraction.coordinates[0] + 0.000065,\n                                lng: selectedInteraction.coordinates[1]\n                            }}\n                            onCloseClick={() => {\n                                setSelectedInteraction(null);\n                            }}\n                        >\n                            <div className=\"map-button\">\n                                <h2>{ selectedInteraction.type }</h2>\n                                <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n                                    <h3>{ selectedInteraction.description}</h3>\n                                </Link>\n                            </div>\n                        </InfoWindow>\n                    </div>\n                )\n            }\n        </GoogleMap>\n    )\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(UnwrappedMap))\n\n// const UnwrappedMap = compose(\n//     withProps({\n//         googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`,\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `100vh` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\n//         defaultZoom={25}\n//         center={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//     >\n//         {props.isMarkerShown &&\n//         <Marker\n//             position={{ lat: props.currentLocation.lat, lng: props.currentLocation.lng }}\n//             onClick={props.onMarkerClick}\n//         />\n//         }\n//         {MapInteractions.locations.map(clickableInteractions => (\n//             <Marker\n//                 key={clickableInteractions.id}\n//                 position={{\n//                     lat: clickableInteractions.coordinates[0],\n//                     lng: clickableInteractions.coordinates[1]\n//                 }}\n//                 onClick={() => {\n//                     props.setSelectedInteraction(clickableInteractions);\n//                 }}\n//                 icon={\n//                     clickableInteractions.type === \"Quiz\" && (QuizIcon)\n//                     ||\n//                     clickableInteractions.type === \"Fact\" && (FactIcon)\n//                     ||\n//                     clickableInteractions.type === \"Game\" && (GameIcon)\n//                 }\n//             />\n//         ))}\n//         {\n//             props.selectedInteraction === MapInteractions.locations[0] && (\n//                 <div className=\"map-info-window\">\n//                     <InfoWindow\n//                         position={{\n//                             lat: props.selectedInteraction.coordinates[0] + 0.000065,\n//                             lng: props.selectedInteraction.coordinates[1]\n//                         }}\n//                         onCloseClick={() => {\n//                             props.setSelectedInteraction(null);\n//                         }}\n//                     >\n//                         <div className=\"map-button\">\n//                             <h2>{ props.selectedInteraction.type }</h2>\n//                             <Link to=\"/quiz\" className=\"map-basic-btn map-quiz-btn\">\n//                                 <h3>{props.selectedInteraction.description}</h3>\n//                             </Link>\n//                         </div>\n//                     </InfoWindow>\n//                 </div>\n//             )\n//         }\n//\n//     </GoogleMap>\n// )\n\nconst MapInteractions = {\n    locations: [\n        {\n            \"id\": 1,\n            \"type\": \"Quiz\",\n            \"coordinates\": [51.523147, -2.577680],\n            \"description\": \"Test Me!\"\n        },\n        {\n            \"id\": 2,\n            \"type\": \"Fact\",\n            \"coordinates\": [51.523160, -2.578440],\n            \"description\": \"Learn!\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Game\",\n            \"coordinates\": [51.523531, -2.578289],\n            \"description\": \"Let's Play!\"\n        }\n    ]\n}\n\nclass MapTest extends Component {\n\n\n    constructor(props){\n        super(props)\n        this.state = {\n            currentLatLng: {\n                lat: 0,\n                lng: 0\n            },\n            isMarkerShown: false,\n        }\n    }\n\n    componentWillUpdate(){\n        this.getGeoLocation()\n    }\n\n    componentDidMount() {\n        this.delayedShowMarker()\n    }\n\n    delayedShowMarker = () => {\n        setTimeout(() => {\n            this.getGeoLocation()\n            this.setState({ isMarkerShown: true })\n        }, 5000)\n    }\n\n    handleMarkerClick = () => {\n        this.setState({ isMarkerShown: false })\n        this.delayedShowMarker()\n    }\n\n    getGeoLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    console.log(position.coords);\n                    this.setState(prevState => ({\n                        currentLatLng: {\n                            ...prevState.currentLatLng,\n                            lat: position.coords.latitude,\n                            lng: position.coords.longitude\n                        }\n                    }))\n                }\n            )\n        } else {\n            console.log(\"error\")\n        }\n    }\n\n    render() {\n        return (\n            <UnwrappedMap\n                isMarkerShown={this.state.isMarkerShown}\n                onMarkerClick={this.handleMarkerClick}\n                currentLocation={this.state.currentLatLng}\n            />\n        )\n    }\n}\n\nexport default MapTest;\n"]},"metadata":{},"sourceType":"module"}